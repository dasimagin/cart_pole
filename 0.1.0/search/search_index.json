{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to CartPole documentation</p>"},{"location":"protocol/","title":"Hardware Protocol","text":""},{"location":"protocol/#overview","title":"Overview","text":"<p>This document defines communication protocol between higher-level SBC (\"brain\")  and lower-level MCU (\"controller\"). Brain operates with high-level commands like  \"go to x=0.1m\", \"accelerate to v=0.5m/s\", \"get current pole angle\". Controller  is responsible for translating these commands to underlying hardware (stepper  motor, encoder, endstop switches etc.). Controller also implements safety checks  to prevent incorrect brain commands from damaging the device (e.g. when the brain  asks for x=10m when max allowed x is 1m).</p> <p>Communication is performed through serial connection, using plain-text messages  with ASCII encoding. This allows easy (de)serialization and ability to manually  debug the device. A message is the smallest protocol entity that can be sent or  received. Messages are separated by UNIX-style \"\\n\" delimiter. Protocol follows  a \"request-reply\" strategy, where the brain only sends requests, and the controller  only sends replies to those requests. Request-reply pairs (also called \u201ccommands\u201d)  are described in a separate section below. There are several types of replies,  which can be determined by message prefix:</p> <ul> <li><code>+ &lt;data&gt;</code> - Successful request. <code>&lt;data&gt;</code> is a response payload.</li> <li><code>! &lt;data&gt;</code> - Request failed. <code>&lt;data&gt;</code> is an error description.</li> <li><code># &lt;data&gt;</code> - Debug message. Could be ignored and/or logged.</li> <li><code>~</code> - Request in progress. This message is sent to prevent timeouts.</li> </ul> <p>The main rule of a command is that it must eventually return either successful (<code>+</code>) or unsuccessful (<code>!</code>) response. If it takes a long time to process a command (e.g. homing), the controller should send multiple <code>~</code> messages to  prevent a timeout. The brain can consider a fatal communication error in two cases:</p> <ul> <li>After sending a request, there\u2019s no <code>+</code>, <code>!</code> or <code>~</code> replies for longer than 1 second.</li> <li>After sending a request, there\u2019s multiple <code>~</code> replies, but no <code>+</code> or <code>!</code> reply for longer than 30 seconds.</li> </ul> <p>If a fatal error is detected, the best thing the brain can do is to hard-reset the controller. Hopefully, that can be done by re-opening the serial connection. In order for this to work,  the serial adapter must have DTR/RTS output connected to MCU reset pin.</p>"},{"location":"protocol/#variables","title":"Variables","text":""},{"location":"protocol/#config","title":"Config","text":"KEY TYPE DEFAULT RANGE COMMENT MAX_X m, float 0 [0, HW_MAX_X] Max cart position (X=0 is center) MAX_V m/s, float 0.5 [0, HW_MAX_V] Max cart velocity MAX_A m/s^2, float 1.0 [0, HW_MAX_A] Max cart acceleration HW_MAX_X m, float 0 - [READONLY] Max allowed cart position HW_MAX_V m/s, float TBD - [READONLY] Max allowed cart velocity HW_MAX_A m/s^2, float TBD - [READONLY] Max allowed cart acceleration CLAMP_X\u00a0 flag, bool FALSE true/false Round X to allowed range without errors CLAMP_V flag, bool FALSE true/false Round V to allowed range without errors CLAMP_A flag, bool FALSE true/false Round A to allowed range without errors <p>Notes about <code>HW_*</code> variables: - <code>HW_MAX_X</code> is updated after the homing procedure. - <code>HW_MAX_V</code> and <code>HW_MAX_A</code> are hardcoded values, determined by stress-tests. It\u2019s recommended to  always set <code>MAX_V</code> and <code>MAX_A</code> slightly lower than <code>HW_MAX_V</code> and <code>HW_MAX_A</code>. Otherwise, the device  operation may be unstable (probably, <code>MOTOR_STALLED</code> error will be raised at some point).</p>"},{"location":"protocol/#state","title":"State","text":"KEY TYPE DEFAULT RANGE COMMENT X m, float 0 - [READONLY] Current cart position V m/s, float 0 - [READONLY] Current cart velocity A m/s^2, float 0 - [READONLY] Current cart acceleration POLE_X rad, float 0 - [READONLY] Current pole angle POLE_V rad/s, float 0 - [READONLY] Current pole angular velocity ERRCODE enum, int 1 - [READONLY] Current error code (see enum below)"},{"location":"protocol/#target","title":"Target","text":"KEY TYPE DEFAULT RANGE COMMENT X m, float 0 [-MAX_A, MAX_X] Target cart position V m/s, float 0 [-MAX_V, MAX_V] Target cart velocity A m/s^2, float 0 [-MAX_A, MAX_A] Target cart acceleration <p>Note: validation logic of <code>X</code>, <code>V</code> and <code>A</code> variables depends on <code>CLAMP_*</code> flags. If set, invalid  values are silently clamped to allowed range. Otherwise, corresponding <code>*_OVERFLOW</code> error is raised.</p>"},{"location":"protocol/#error-codes-enum","title":"Error codes (enum):","text":"KEY INT COMMENT NO_ERROR 0 This is fine (no errors, motion is allowed) NEED_RESET 1 Device needs homing (see reset command) X_OVERFLOW 2 Current or target position was out of allowed range V_OVERFLOW 3 Current or target velocity was out of allowed range A_OVERFLOW 4 Current or target acceleration was out of allowed range MOTOR_STALLED 5 Stepper driver detected motor failure (TMC\u2019s StallGuard is triggered) ENDSTOP_HIT 6 One of endstops is triggered during movement"},{"location":"protocol/#commands","title":"Commands","text":""},{"location":"protocol/#get-group-key1-key2","title":"<code>get &lt;group&gt; [key1 key2 ...]</code>","text":"<p>Returns values for given keys in the form of space-separated \"key=value\" pairs. If no keys are specified, returns all keys from given group. <pre><code>&gt;&gt;&gt; get config max_x\n&lt;&lt;&lt; + max_x=123.456\n&gt;&gt;&gt; get state non_existent_key\n&lt;&lt;&lt; ! No such key: non_existent_key\n&gt;&gt;&gt; get target\n&lt;&lt;&lt; + x=123 v=456 a=789\n</code></pre></p>"},{"location":"protocol/#set-group-key1val1-key2val2","title":"<code>set &lt;group&gt; [key1=val1 key2=val2 ...]</code>","text":"<p>Updates values of given keys and returns them back (format matches \"get\" command). <pre><code>&gt;&gt;&gt; set state x=123\n&lt;&lt;&lt; ! This key is readonly\n&gt;&gt;&gt; set config max_v=1.0 max_a=2.0\n&lt;&lt;&lt; + max_v=1.0 max_a=2.0\n&gt;&gt;&gt; config set max_v=1000\n&lt;&lt;&lt; ! Value out of range: 1000 &gt; 10 [at max_v=1000]\n</code></pre></p>"},{"location":"protocol/#reset","title":"<code>reset</code>","text":"<p>Performs homing procedure and resets all variables. This command may take a long time to complete, so it will periodically send keepalive <code>~</code> messages. After completion, returns the word \"ok\". <pre><code>&gt;&gt;&gt; reset\n&lt;&lt;&lt; ~\n&lt;&lt;&lt; ~\n&lt;&lt;&lt; ~\n&lt;&lt;&lt; ~\n&lt;&lt;&lt; + ok\n</code></pre></p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#enviroment","title":"Enviroment","text":"<p>Python is main language of project. So, students may learn control theory and make experiments faster and easier.</p> <p>Firstly, you need checkout repo and prepare environemnt, using poetry.</p> <pre><code># upload repo\ngit clone https://github.com/robotics-laboratory/cart-pole.git\n\n# go to repo\ncd cart-pole\n\n# check poetry config\npoetry config --list # install all depencies to .venv folder\npoetry install\n\n# run tests to check that everithing is OK\npoetry run pytest tests\n\n# to run your script (e.g. some example)\npoetry run python examples/simulation.py\n</code></pre> <p>Do we need docker?</p>"},{"location":"quickstart/#foxglove","title":"Foxglove","text":"<p>For visualization of real time data we use foxglove studio. You may use our instance or use docker container with server and spefic fixes. More information about setup here. Predefined layouts are stored at this folder.</p>"},{"location":"quickstart/#logging","title":"Logging","text":"<p>We have convinient logging system, it may show data in real time and replay saved data in mcap format.</p> <pre><code>from pydantic import BaseModel\n\nimport cartpole.log as log\n\nimport random\nimport time\n\n# all messages must be inherited from BaseModel\nclass RandMsg(BaseModel):\n    dist: str = 'uniform(0, 1)'\n    value: float = 0.0\n\n# define log file name\nlog.setup(log_path='log_example.mcap')\n\n# messages are available in real time in foxglove (websocket mode)\nfor i in range(20):\n    # publish message, timestamp is optional (default is current time)\n    log.publish('/random', RandMsg(value=random.random()))\n    time.sleep(0.2) # add some delay\n</code></pre>"},{"location":"quickstart/#simulation","title":"Simulation","text":"<p>For development and testing of control algorithms, we provide CartPole simulator, which fully implemntet CartPoleBase interface. The simulation is carried out by numerical integration of parameterized dynamic system (more information here). Also simulator may be used to train ML agents.</p> <p></p> <pre><code>from cartpole import Error, State\nfrom cartpole import TorchSimulator, TorchSimulatorConfig\nfrom cartpole import log\n\nimport time\nimport torch\n\n# set simulation step as 0.05 seconds\ndelta = 0.05\n\n# setup logging (look at mcap logs after simulation)\nlog.setup(log_path='simulation_example.mcap')\n\n# create simulator with default config\nconfig = TorchSimulatorConfig.for_thin_pole()\ncartpole = TorchSimulator(config=config)\n\n# reset simulator to initial state\ncartpole.reset(state=State(cart_position=0, pole_angle=(2/4 * torch.pi)))\nenergy_start = cartpole.evaluate_energy()\n\n\n# run simulation\nfor _ in range(1000):\n    # use for loggin simulation time instead of real time\n    stamp = cartpole.timestamp()\n\n    # log system state and simulator info\n    log.publish('/cartpole/state', cartpole.get_state(), stamp)\n    log.publish('/cartpole/info', cartpole.get_info(), stamp)\n\n    # make simulation step\n    cartpole.advance(delta)\n    time.sleep(delta)\n</code></pre>"},{"location":"syntax-test/","title":"MkDocs &amp; mkdocs-material syntax test","text":"<p>See mkdocs-material for more examples</p>"},{"location":"syntax-test/#callouts","title":"Callouts","text":"<p>Important note</p> <p>This is a note</p> <p>Warning</p> <p>Uh oh</p>"},{"location":"syntax-test/#buttons","title":"Buttons","text":"<p>Open Foxglove</p>"},{"location":"syntax-test/#code","title":"Code","text":"main.py<pre><code>import tensorflow as tf\n</code></pre>"},{"location":"syntax-test/#math-mathjax","title":"Math (mathjax)","text":"<p>We can use inline \\(m * a * t * h\\) as well as blocks:</p> \\[\\begin{align}     T_p &amp; = T^t_p + T^r_p \\nonumber \\\\         &amp; = \\frac{1}{2} m_p \\begin{Vmatrix}\\dot{P}\\end{Vmatrix}_2^2 + \\frac{1}{2}I_p\\dot{\\theta}^2 \\nonumber \\\\         &amp; = \\frac{1}{2} m_p (\\dot{x} + l \\dot{\\theta} \\cos \\theta )^2 + \\frac{1}{2} m_p (l \\dot{\\theta} \\sin \\theta)^2 + \\frac{1}{2}I_p\\dot{\\theta}^2 \\nonumber \\\\         &amp; = \\frac{1}{2} m_p \\dot{x}^2 + m_p \\dot{x} l \\dot{\\theta} \\cos \\theta + \\frac{1}{2} \\dot{\\theta}^2 \\left( m_p l^2  + I_p \\right). \\end{align}\\]"},{"location":"syntax-test/#svg-tikzjax","title":"SVG (tikzjax)","text":""},{"location":"syntax-test/#images","title":"Images","text":"Image caption"},{"location":"syntax-test/#diagrams","title":"Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre>"}]}