{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>CartPole is an educational project of the robotics group (HSE/FCS). It is designed to learn the basics of optimal control and reinforcement learning. The environment is a variation of famous control problem, where a pole is attached by a joint to a cart, moving along a axis. Some motor drives the cart with acceleration as control input. The goal is to swing up the pole and maintain it in unstable equilibrium state. You can follow our progress on YouTube.</p> <p> </p> Linear CartPole <p>Linear CartPole is classic kinematic scheme, but it requires a lot of space, periodical homing (return cart to the initial pose) and etc. Radial CartPole is a modification, which allows to avoid these problems, keeping the same motion equations. In case of radial version cart moves along the circle with radius \\(r\\). Yoy can see the difference on the pictures below.</p> LinearRadial <p></p> <p></p>"},{"location":"dynamics/","title":"Dynamics","text":""},{"location":"dynamics/#linear-cartpole","title":"Linear CartPole","text":"<p>A cart with mass \\(m_c\\) moves along the \\(x\\)-axis, so its center \\(C\\) has coordinates \\((x, 0)^T\\). A pole with mass \\(m_p\\) is attached to the cart with a hinge at point \\(C\\), and rotates around with viscous friction. The pole's center of mass is at \\(P\\), moment of inertia is \\(I_p\\). The angle of rotation is denoted as \\(\\theta\\), measured counterclockwise from the axis \\(-y\\). A force \\(f_x\\) is applied to the cart and the force of gravity \\(g\\) acts on the pole.</p> <p> </p> \\[ \\begin{align}     &amp; C = \\begin{pmatrix}         x \\\\ 0     \\end{pmatrix}      &amp;&amp; \\dot{C} = \\begin{pmatrix}         \\dot{x} \\\\ 0     \\end{pmatrix} \\\\     &amp; P = \\begin{pmatrix}         x + l \\sin \\theta \\\\ - l \\cos \\theta     \\end{pmatrix}     &amp;&amp; \\dot{P} = \\begin{pmatrix}         \\dot{x} + l \\dot{\\theta} \\cos \\theta \\\\ l \\dot{\\theta} \\sin \\theta     \\end{pmatrix} \\end{align} \\] <p>The kinetic energy of the cart is</p> \\[ \\begin{align}     T_c = \\frac{1}{2} m_c \\begin{Vmatrix}         \\dot{C}     \\end{Vmatrix}_2^2 = \\frac{1}{2} m_c \\dot{x}^2. \\end{align} \\] <p>As a result energy of the whole system is following</p> \\[ \\begin{align}     T &amp; = T_c + T_p = \\frac{1}{2} \\dot{x}^2 (m_c + m_p) + m_p \\dot{x} l \\dot{\\theta} \\cos \\theta             + \\frac{1}{2} \\dot{\\theta}^2 \\left( m_p l^2  + I_p \\right); \\\\     U &amp; = \\underbrace{U_c}_{0} + U_p = -m_p gl \\cos \\theta. \\end{align} \\] <p>To find the dynamics of system, let's use the Euler-Lagrange differential equation, where \\(L = T - U\\), \\(q = (x, \\theta)^T\\) and \\(Q\\) is the generalized force. In our case, we have deal with two forces: motor force \\(f_x\\) and viscous friction \\(f_{\\theta}(\\theta, \\dot{\\theta}) = -\\mu \\dot{\\theta}\\).</p> \\[ \\begin{align}     Q &amp;= \\frac{d}{dt} \\frac{dL}{d\\dot{q}} - \\frac{dL}{dq} = \\begin{pmatrix} f_x \\\\ f_{\\theta} \\end{pmatrix} \\end{align} \\] <p>Motion equations</p> \\[ \\begin{align}     m_p \\ddot{x} l \\cos \\theta + \\ddot{\\theta} \\left(m_p l^2 + I_p\\right) + m_p g l \\sin \\theta &amp;= f_{\\theta}(\\theta, \\dot{\\theta}) \\\\     \\ddot{x}(m_c + m_p) + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta &amp;= f_{x}. \\end{align} \\] Derivation \\[ \\begin{equation}     L = \\frac{1}{2} \\dot{x}^2 (m_c + m_p) + m_p \\dot{x} l \\dot{\\theta} \\cos \\theta +             \\frac{1}{2} \\dot{\\theta}^2 \\left( m_p l^2  + I_p \\right) + m_p gl \\cos \\theta. \\end{equation} \\] \\[ \\begin{align}     \\frac{dL}{d\\theta} &amp; = - m_p \\dot{x} l \\dot{\\theta} \\sin \\theta - m_p gl \\sin \\theta \\\\     \\frac{dL}{d\\dot{\\theta}} &amp; = m_p \\dot{x} l \\cos \\theta + \\left(m_p l^2 + I_p\\right) \\dot{\\theta} \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} &amp; =         m_p \\ddot{x} l \\cos \\theta - m_p  \\dot{x} l \\dot{\\theta} \\sin \\theta + \\left(m_p l^2 + I_p\\right) \\ddot{\\theta}  \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} - \\frac{dL}{d\\theta} &amp; =             m_p \\ddot{x} l \\cos \\theta + \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} + m_p g l \\sin \\theta \\\\ \\end{align} \\] \\[ \\begin{align}     \\frac{dL}{dx} &amp; = 0 \\\\     \\frac{dL}{d\\dot{x}} &amp; = (m_c + m_p) \\dot{x} + m_p l \\dot{\\theta} \\cos \\theta \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{x}} &amp; =             (m_c + m_p) \\ddot{x} + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{x}} - \\frac{dL}{dx} &amp; =         (m_c + m_p) \\ddot{x} + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta. \\\\ \\end{align} \\]"},{"location":"dynamics/#acceleration-control","title":"Acceleration control","text":"<p>Let's make the assumption that the motor can generate any force necessary for the cart to reach acceleration in \\([-a, a]\\) on a fixed cart velocity range. This fact allows us to consider the cart acceleration as a control input and significantly simplify the equations of motion</p> \\[ \\begin{align}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;= f_{\\theta}(\\theta, \\dot{\\theta})             - m_p \\ddot{x} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{x}  &amp;= u, \\quad u \\in [-a, a]. \\end{align} \\] <p>But for practice it's more convenient to use another form</p> \\[ \\begin{align*}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;= -\\mu\\dot{\\theta} - m_p \\ddot{x} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{\\theta} &amp;= -\\frac{\\mu}{\\left(m_p l^2 + I_p\\right)}\\dot{\\theta}             - \\frac{\\ddot{x} \\cos \\theta - g \\sin \\theta}{l + \\frac{I_p}{m_p l}}. \\\\ \\end{align*} \\] <p>Since all parameters do not change over time, we can greatly simplify the motion equations.</p> <p>Motion equations</p> \\[ \\begin{align}     \\ddot{\\theta} &amp;= -b\\dot{\\theta} - k \\big(\\ddot{x} \\cos \\theta - g \\sin \\theta\\big) \\\\     \\ddot{x} &amp;= u, \\quad u \\in [-a, a]. \\end{align} \\]"},{"location":"dynamics/#radial-cartpole","title":"Radial CartPole","text":"<p>Linear CartPole is classic kinematic scheme, but it requires a lot of space, periodical homing (return cart to the initial pose ) and etc. Radial CartPole is a modification, which allows to avoid problems, keeping the same motion equations. In case of radial version cart moves along the circle with radius \\(r\\).</p> <p> </p> <p>Pole's mass \\(m_p\\), moment of inertian \\(I_p\\) and distance from hinge to center of mass \\(l_p\\) are known again. But instead of position \\(x\\) there is angle \\(\\phi\\) (in some sense \\(x = r\\phi\\)) and control input is radial acceleration \\(\\ddot{\\phi}\\). Also, as shown in previous section, we can consider mass of cart is zero.</p> <p>Actually, after some calculations we can get the same motion equations as for classic version, but linear variables are replaced by angular ones</p> \\[ \\begin{align}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;=             f_{\\theta}(\\theta, \\dot{\\theta}) - m_p r \\ddot{\\phi} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{\\phi}  &amp;= u, \\quad u \\in [u_{min}, u_{max}]. \\end{align} \\] <p>Dynamics equation</p> \\[ \\begin{align}     \\ddot{\\theta} &amp;= -b\\dot{\\theta} - k\\big(r \\ddot{\\phi} \\cos \\theta - g \\sin \\theta\\big) \\\\     \\ddot{\\phi} &amp;= u, \\quad u \\in [u_{min}, u_{max}]. \\end{align} \\] Derivation <p>Note that \\(T_p^r = \\frac{1}{2}I_p\\dot{\\theta}^2\\) and \\(T_p^t = \\frac{1}{2}m_p \\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2\\). To calculate \\(\\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2\\), consider the coordinates system plane, which is attached to the cart and tangent to the circle (pole fully lies in that plane).</p> <p> </p> \\[ \\begin{align}     \\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2 = \\left(\\underbrace{\\dot{\\phi} r         + \\dot{\\theta} l_p \\cos \\theta }_{\\dot{x}'}\\right)^2          + \\left(\\underbrace{\\dot{\\theta} l_p \\sin \\theta}_{\\dot{y}'} \\right)^2         = \\dot{\\phi}^2 r^2 + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2. \\end{align} \\] <p>Bellow rest of the calculations are shown</p> \\[ \\begin{align}     T_p &amp;= \\frac{1}{2}I_p\\dot{\\theta}^2 + \\frac{1}{2}m_p\\left(\\dot{\\phi}^2 r^2             + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2\\right) \\\\     U_p &amp;= - m_p g l_p \\cos \\theta \\\\     L = T_p - U_p &amp;= \\frac{1}{2} I_p \\dot{\\theta}^2 + \\frac{1}{2} m_p \\left(\\dot{\\phi}^2 r^2             + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2\\right) + m_p g l_p \\cos \\theta \\end{align} \\] \\[ \\begin{align}     \\frac{dL}{d\\theta} &amp; = - m_p l_p (r \\dot{\\phi} \\dot{\\theta} \\sin \\theta + g \\sin \\theta) \\\\     \\frac{dL}{d\\dot{\\theta}} &amp; = I_p \\dot{\\theta} + m_p l_p (\\dot{\\phi} r \\cos \\theta + l_p \\dot{\\theta}) \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} &amp; =             I_p \\ddot{\\theta} + m_p l_p (r \\ddot{\\phi} \\cos \\theta + l_p \\ddot{\\theta} - r \\dot{\\phi} \\dot{\\theta} \\sin \\theta) \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} - \\frac{dL}{d\\theta} &amp; =             \\ddot{\\theta} (I_p  + m_p l_p^2) + m_p l_p (r \\ddot{\\phi} \\cos \\theta + g \\sin \\theta) = 0. \\end{align} \\]"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#enviroment","title":"Enviroment","text":"<p>Python is main language of project. So, students may learn control theory and make experiments faster and easier. Firstly, you need checkout repo and prepare enviroment.</p> <pre><code>git clone https://github.com/robotics-laboratory/cart-pole.git\n</code></pre> <p>We have a built container with all dependencies, use it for development and testing (you need to have docker and docker-compose installed). Run in root of repo following commands.</p> <p>Pull latest actual image <code>docker compose pull</code>, that you may start devcontainer in VSCode or run it manually.</p> <pre><code># enter to container\ndocker exec -it cartpole bash\n</code></pre> <p>Repo folder is mounted as <code>/cartpole</code> dir, so you can edit files in your favorite IDE. We highly recommend to use <code>VS Code</code>, since we provide everything for comfortable development. After you set up your environment, you can run tests to check that everything is OK.</p> <pre><code>pytest tests\n</code></pre> <p>Also there are some environment variables, which may be useful for you:</p> <ul> <li><code>$CONTAINER_NAME</code> - name of container (default is <code>cartpole</code>)</li> </ul> <p>If you want to use your own python environment, you can install all dependencies manually, using poetry.</p> <pre><code># check poetry config\npoetry config --list # install all depencies to .venv folder\npoetry install\n\n# run tests to check that everithing is OK\npoetry run pytest tests\n</code></pre>"},{"location":"quickstart/#foxglove","title":"Foxglove","text":"<p>For visualization of real time data we use foxglove studio. We strongly suggest to use our instance, but you may also setup server with our specific fixes by yourself (more information here). In Foxglove Studio select <code>Open connection</code> than <code>Foxglove WebSocket</code> and enter <code>ws://localhost:8765</code> (use your port) in address field.</p>"},{"location":"quickstart/#logging","title":"Logging","text":"<p>We have convinient logging system, it may show data in real time and replay saved data in mcap format.</p> examples/log.py<pre><code>import cartpole.log as log\nfrom pydantic import BaseModel\nimport random\nimport time\n# all messages must be inherited from BaseModel\nclass RandMsg(BaseModel):\ndist: str = 'uniform(0, 1)'\nvalue: float = 0.0\n# define log file name\nlog.setup(log_path='log_example.mcap', level=log.DEBUG)\n# messages are available in real time in foxglove (websocket mode)\nfor i in range(10):\nvalue = random.uniform(0, 1)\n# publish message, timestamp is optional (default is current time)\nlog.publish('/random', RandMsg(value=value))\n# print message to console and log (see /log topic)\nlog.info(f'publish {value:.2f}')\n# add some delay for demo purposes\ntime.sleep(0.2)\n</code></pre>"},{"location":"quickstart/#simulation","title":"Simulation","text":"<p>For development and testing of control algorithms, we provide CartPole simulator, which fully implemntet CartPoleBase interface.  The simulation is carried out by numerical integration of parameterized dynamic system (more information here). Also simulator may be used to train ML agents.</p> examples/simulatio.py<pre><code>from cartpole import Error, State\nfrom cartpole import Simulator\nfrom cartpole import log\nimport time\n# set simulation step as 0.05 seconds\ndelta = 0.05\n# setup logging (look at mcap logs after simulation)\nlog.setup(log_path='simulation_example.mcap')\n# create simulator with default config\ncartpole = Simulator()\n# reset simulator to initial state\ncartpole.reset(state=State(cart_position=0, pole_angle=2))\n# run simulation\nfor _ in range(1000):\n# use for loggin simulation time instead of real time\nstate = cartpole.get_state()\n# log system state and simulator info\nlog.publish('/cartpole/state', state, state.stamp)\n# make simulation step\ncartpole.advance(delta)\ntime.sleep(delta)\n</code></pre>"},{"location":"quickstart/#docs","title":"Docs","text":"<p>You can build and run docs server locally.</p> <pre><code>mkdocs serve -a 0.0.0.0:8000\n</code></pre>"},{"location":"reference/common/","title":"Interface","text":""},{"location":"reference/common/#cartpole.common","title":"<code>cartpole.common</code>","text":""},{"location":"reference/common/#cartpole.common.Limits","title":"<code>Limits</code>","text":"<p>Constraints of cart state, used for control and cartpole parametrization.</p> ATTRIBUTE DESCRIPTION <code>cart_position</code> <p>max absolute cart position (m)</p> <p> TYPE: <code>float | None</code> </p> <code>cart_velocity</code> <p>max absolute cart velocity (m/s)</p> <p> TYPE: <code>float | None</code> </p> <code>cart_acceleration</code> <p>max absolute cart acceleration (m/s^2)</p> <p> TYPE: <code>float | None</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>class Limits(BaseModel):\n\"\"\"\n    Constraints of cart state, used for control and cartpole parametrization.\n    Attributes\n    ----------\n    cart_position: float | None\n        max absolute cart position (m)\n    cart_velocity: float | None\n        max absolute cart velocity (m/s)\n    cart_acceleration: float | None\n        max absolute cart acceleration (m/s^2)\n    \"\"\"\ncart_position: float = 0.0\ncart_velocity: float = 0.0\ncart_acceleration: float = 0.0\ndef stronger(self, other: \"Limits\") -&gt; bool:\n\"\"\"\n        Check if this limit is stronger (more restrictive) than the other.\n        \"\"\"\nreturn (\nself.cart_position &lt;= other.cart_position\nand self.cart_velocity &lt;= other.cart_velocity\nand self.cart_acceleration &lt;= other.cart_acceleration\n)\n</code></pre>"},{"location":"reference/common/#cartpole.common.Limits.stronger","title":"<code>stronger(other: Limits) -&gt; bool</code>","text":"<p>Check if this limit is stronger (more restrictive) than the other.</p> Source code in <code>cartpole/common.py</code> <pre><code>def stronger(self, other: \"Limits\") -&gt; bool:\n\"\"\"\n    Check if this limit is stronger (more restrictive) than the other.\n    \"\"\"\nreturn (\nself.cart_position &lt;= other.cart_position\nand self.cart_velocity &lt;= other.cart_velocity\nand self.cart_acceleration &lt;= other.cart_acceleration\n)\n</code></pre>"},{"location":"reference/common/#cartpole.common.Parameters","title":"<code>Parameters</code>","text":"<p>CartPole dynamics parameters. Parameters are defined and matter only for simulation.</p> <p>For more information see: https://cartpole.robotics-lab.ru/dynamics-and-control</p> ATTRIBUTE DESCRIPTION <code>gravity</code> <p>gravity constant (default 9.8 m/s^2)</p> <p> TYPE: <code>float</code> </p> <code>friction_coef</code> <p>inner system parameters</p> <p> TYPE: <code>float</code> </p> <code>mass_coef</code> <p>inner system parameters</p> <p> TYPE: <code>float</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>class Parameters(BaseModel):\n\"\"\"\n    CartPole dynamics parameters.\n    Parameters are defined and matter only for simulation.\n    For more information see: https://cartpole.robotics-lab.ru/dynamics-and-control\n    Attributes\n    ----------\n    gravity: float\n        gravity constant (default 9.8 m/s^2)\n    friction_coef: float\n        inner system parameters\n    mass_coef: float\n        inner system parameters\n    \"\"\"\n@staticmethod\ndef make(\nmass: float,\ninertia: float,\nlength: float,\nfriction: float = 0.0,\ngravity: float = 9.81,\n) -&gt; \"Parameters\":\n\"\"\"\n        Create parameters from physical properties.\n        Parameters\n        ----------\n        mass: float\n            pole mass (kg)\n        inertia: float\n            pole moment of inertia (kg*m^2)\n        length: float\n            distance from the pivot to the center of mass (m)\n        friction: float\n            friction coefficient (N*s/m)\n        gravity: float\n            gravity constant (m/s^2)\n        \"\"\"\ndelimeter = mass * length * length + inertia\nreturn Parameters(\ngravity=gravity,\nfriction_coef=friction / delimeter,\nmass_coef=(mass * length) / delimeter,\n)\ngravity: float = 9.81\nfriction_coef: float | None = None\nmass_coef: float | None = None\n</code></pre>"},{"location":"reference/common/#cartpole.common.Parameters.make","title":"<code>make(mass: float, inertia: float, length: float, friction: float = 0.0, gravity: float = 9.81) -&gt; Parameters</code>  <code>staticmethod</code>","text":"<p>Create parameters from physical properties.</p> PARAMETER  DESCRIPTION <code>mass</code> <p>pole mass (kg)</p> <p> TYPE: <code>float</code> </p> <code>inertia</code> <p>pole moment of inertia (kg*m^2)</p> <p> TYPE: <code>float</code> </p> <code>length</code> <p>distance from the pivot to the center of mass (m)</p> <p> TYPE: <code>float</code> </p> <code>friction</code> <p>friction coefficient (N*s/m)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.0</code> </p> <code>gravity</code> <p>gravity constant (m/s^2)</p> <p> TYPE: <code>float</code> DEFAULT: <code>9.81</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>@staticmethod\ndef make(\nmass: float,\ninertia: float,\nlength: float,\nfriction: float = 0.0,\ngravity: float = 9.81,\n) -&gt; \"Parameters\":\n\"\"\"\n    Create parameters from physical properties.\n    Parameters\n    ----------\n    mass: float\n        pole mass (kg)\n    inertia: float\n        pole moment of inertia (kg*m^2)\n    length: float\n        distance from the pivot to the center of mass (m)\n    friction: float\n        friction coefficient (N*s/m)\n    gravity: float\n        gravity constant (m/s^2)\n    \"\"\"\ndelimeter = mass * length * length + inertia\nreturn Parameters(\ngravity=gravity,\nfriction_coef=friction / delimeter,\nmass_coef=(mass * length) / delimeter,\n)\n</code></pre>"},{"location":"reference/common/#cartpole.common.Config","title":"<code>Config</code>","text":"<p>CartPole configuration.</p> ATTRIBUTE DESCRIPTION <code>hardware_limits</code> <p>hardware limits</p> <p> TYPE: <code>Limits</code> </p> <code>control_limits</code> <p>control limits</p> <p> TYPE: <code>Limits</code> </p> <code>parameters</code> <p>dynamics parameters (defined only for simulation)</p> <p> TYPE: <code>Parameters</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>class Config(BaseModel):\n\"\"\"\n    CartPole configuration.\n    Attributes\n    ----------\n    hardware_limits: Limits\n        hardware limits\n    control_limits: Limits\n        control limits\n    parameters: Parameters\n        dynamics parameters (defined only for simulation)\n    \"\"\"\nhardware_limit: Limits = Limits()\ncontrol_limit: Limits = Limits()\nparameters: Parameters = Parameters()\ndef to_yaml(self) -&gt; str:\n\"\"\"\n        Convert config to yaml string.\n        \"\"\"\nreturn yaml.dump(self.dict(), indent=2)\ndef to_yaml_file(self, file_path: str) -&gt; None:\n\"\"\"\n        Save config to yaml file.\n        \"\"\"\nwith open(file_path, \"w\") as f:\nf.write(self.to_yaml())\n@staticmethod\ndef from_yaml(yaml_str: str) -&gt; \"Config\":\n\"\"\"\n        Load config from yaml string.\n        \"\"\"\nreturn Config.parse_obj(yaml.load(yaml_str, Loader=yaml.FullLoader))\n@staticmethod\ndef from_yaml_file(file_path: str) -&gt; \"Config\":\n\"\"\"\n        Load config from yaml file.\n        \"\"\"\nwith open(file_path, \"r\") as f:\nreturn Config.from_yaml(f.read())\n</code></pre>"},{"location":"reference/common/#cartpole.common.Config.to_yaml","title":"<code>to_yaml() -&gt; str</code>","text":"<p>Convert config to yaml string.</p> Source code in <code>cartpole/common.py</code> <pre><code>def to_yaml(self) -&gt; str:\n\"\"\"\n    Convert config to yaml string.\n    \"\"\"\nreturn yaml.dump(self.dict(), indent=2)\n</code></pre>"},{"location":"reference/common/#cartpole.common.Config.to_yaml_file","title":"<code>to_yaml_file(file_path: str) -&gt; None</code>","text":"<p>Save config to yaml file.</p> Source code in <code>cartpole/common.py</code> <pre><code>def to_yaml_file(self, file_path: str) -&gt; None:\n\"\"\"\n    Save config to yaml file.\n    \"\"\"\nwith open(file_path, \"w\") as f:\nf.write(self.to_yaml())\n</code></pre>"},{"location":"reference/common/#cartpole.common.Config.from_yaml","title":"<code>from_yaml(yaml_str: str) -&gt; Config</code>  <code>staticmethod</code>","text":"<p>Load config from yaml string.</p> Source code in <code>cartpole/common.py</code> <pre><code>@staticmethod\ndef from_yaml(yaml_str: str) -&gt; \"Config\":\n\"\"\"\n    Load config from yaml string.\n    \"\"\"\nreturn Config.parse_obj(yaml.load(yaml_str, Loader=yaml.FullLoader))\n</code></pre>"},{"location":"reference/common/#cartpole.common.Config.from_yaml_file","title":"<code>from_yaml_file(file_path: str) -&gt; Config</code>  <code>staticmethod</code>","text":"<p>Load config from yaml file.</p> Source code in <code>cartpole/common.py</code> <pre><code>@staticmethod\ndef from_yaml_file(file_path: str) -&gt; \"Config\":\n\"\"\"\n    Load config from yaml file.\n    \"\"\"\nwith open(file_path, \"r\") as f:\nreturn Config.from_yaml(f.read())\n</code></pre>"},{"location":"reference/common/#cartpole.common.Error","title":"<code>Error</code>","text":"<p>CartPole system error codes.</p> ATTRIBUTE DESCRIPTION <code>NO_ERROR</code> <p>no error</p> <p> </p> <code>NEED_RESET</code> <p>reset system before use (make homing)</p> <p> </p> <code>CART_POSITION_OVERFLOW</code> <p>cart position is out of control limit</p> <p> </p> <code>CART_VELOCITY_OVERFLOW</code> <p>cart velocity is out of control limit</p> <p> </p> <code>CART_ACCELERATION_OVERFLOW</code> <p>cart acceleration is out of control limit</p> <p> </p> <code>HARDWARE</code> <p>some hardware error (specific for real device)</p> <p> </p> Source code in <code>cartpole/common.py</code> <pre><code>class Error(enum.IntEnum):\n\"\"\"\n    CartPole system error codes.\n    Attributes\n    ----------\n    NO_ERROR:\n        no error\n    NEED_RESET:\n        reset system before use (make homing)\n    CART_POSITION_OVERFLOW:\n        cart position is out of control limit\n    CART_VELOCITY_OVERFLOW:\n        cart velocity is out of control limit\n    CART_ACCELERATION_OVERFLOW:\n        cart acceleration is out of control limit\n    HARDWARE:\n        some hardware error (specific for real device)\n    \"\"\"\nNO_ERROR = 0\nNEED_RESET = 1\nCART_POSITION_OVERFLOW = 2\nCART_VELOCITY_OVERFLOW = 3\nCART_ACCELERATION_OVERFLOW = 4\nHARDWARE = 5\ndef __bool__(self) -&gt; bool:\nreturn self != Error.NO_ERROR\ndef __repr__(self) -&gt; str:\nreturn str(self.value)\n</code></pre>"},{"location":"reference/common/#cartpole.common.State","title":"<code>State</code>","text":"<p>System state.</p> ATTRIBUTE DESCRIPTION <code>cart_position</code> <p>cart position (m)</p> <p> TYPE: <code>float</code> </p> <code>cart_velocity</code> <p>cart velocity (m/s)</p> <p> TYPE: <code>float</code> </p> <code>cart_acceleration</code> <p>cart acceleration (m/s^2)</p> <p> TYPE: <code>float</code> </p> <code>pole_angle</code> <p>absolute accumulated pole angle (rad)</p> <p> TYPE: <code>float</code> </p> <code>pole_angular_velocity</code> <p>pole angular velocity (rad/s)</p> <p> TYPE: <code>float</code> </p> <code>stamp</code> <p>system time stamp (s)</p> <p> TYPE: <code>float</code> </p> <code>error</code> <p>system error code</p> <p> TYPE: <code>Error</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>class State(BaseModel):\n\"\"\"\n    System state.\n    Attributes\n    ----------\n    cart_position: float\n        cart position (m)\n    cart_velocity: float\n        cart velocity (m/s)\n    cart_acceleration: float\n        cart acceleration (m/s^2)\n    pole_angle: float\n        absolute accumulated pole angle (rad)\n    pole_angular_velocity: float\n        pole angular velocity (rad/s)\n    stamp: float\n        system time stamp (s)\n    error: Error\n        system error code\n    \"\"\"\ncart_position: float = 0.0\ncart_velocity: float = 0.0\ncart_acceleration: float = 0.0\npole_angle: float = 0.0\npole_angular_velocity: float = 0.0\nstamp: float = 0.0\nerror: Error = Error.NO_ERROR\nclass Config:\n@staticmethod\ndef json_schema_extra(schema: Any, model: Any) -&gt; None:\n# make schema lightweight\nschema.pop(\"definitions\", None)\nproperties = schema[\"properties\"]\nfor name in properties:\nproperties[name].pop(\"title\", None)\n# simplify schema for foxglove\nproperties[\"error\"] = {\"type\": \"integer\", \"enum\": [e.value for e in Error]}\ndef validate(self, config: Config) -&gt; None:\n\"\"\"\n        Validates state against limits.\n        \"\"\"\nif self.error:\nreturn  # keep error\nif abs(self.cart_position) &gt; config.hardware_limit.cart_position:\nself.error = Error.CART_POSITION_OVERFLOW\nreturn\nif abs(self.cart_velocity) &gt; config.hardware_limit.cart_velocity:\nself.error = Error.CART_VELOCITY_OVERFLOW\nreturn\nif abs(self.cart_acceleration) &gt; config.hardware_limit.cart_acceleration:\nself.error = Error.CART_ACCELERATION_OVERFLOW\nreturn\ndef copy(self) -&gt; \"State\":\n\"\"\"\n        Returns deep copy of the state.\n        \"\"\"\nreturn State(**self.dict())\ndef as_tuple(self) -&gt; tuple[float, float, float, float]:\n\"\"\"\n        Returns tuple (cart_position, pole_angle, cart_velocity, pole_angular_velocity).\n        \"\"\"\nreturn (\nself.cart_position,\nself.pole_angle,\nself.cart_velocity,\nself.pole_angular_velocity,\n)\ndef torch4(self) -&gt; torch.Tensor:\n\"\"\"\n        Returns state tuple as torch vector.\n        \"\"\"\nreturn torch.tensor(self.as_tuple(), dtype=torch.float32)\ndef numpy4(self) -&gt; numpy.ndarray:\n\"\"\"\n        Returns state tuple as numpy vector.\n        \"\"\"\nreturn numpy.array(self.as_tuple(), dtype=numpy.float32)\n</code></pre>"},{"location":"reference/common/#cartpole.common.State.validate","title":"<code>validate(config: Config) -&gt; None</code>","text":"<p>Validates state against limits.</p> Source code in <code>cartpole/common.py</code> <pre><code>def validate(self, config: Config) -&gt; None:\n\"\"\"\n    Validates state against limits.\n    \"\"\"\nif self.error:\nreturn  # keep error\nif abs(self.cart_position) &gt; config.hardware_limit.cart_position:\nself.error = Error.CART_POSITION_OVERFLOW\nreturn\nif abs(self.cart_velocity) &gt; config.hardware_limit.cart_velocity:\nself.error = Error.CART_VELOCITY_OVERFLOW\nreturn\nif abs(self.cart_acceleration) &gt; config.hardware_limit.cart_acceleration:\nself.error = Error.CART_ACCELERATION_OVERFLOW\nreturn\n</code></pre>"},{"location":"reference/common/#cartpole.common.State.copy","title":"<code>copy() -&gt; State</code>","text":"<p>Returns deep copy of the state.</p> Source code in <code>cartpole/common.py</code> <pre><code>def copy(self) -&gt; \"State\":\n\"\"\"\n    Returns deep copy of the state.\n    \"\"\"\nreturn State(**self.dict())\n</code></pre>"},{"location":"reference/common/#cartpole.common.State.as_tuple","title":"<code>as_tuple() -&gt; tuple[float, float, float, float]</code>","text":"<p>Returns tuple (cart_position, pole_angle, cart_velocity, pole_angular_velocity).</p> Source code in <code>cartpole/common.py</code> <pre><code>def as_tuple(self) -&gt; tuple[float, float, float, float]:\n\"\"\"\n    Returns tuple (cart_position, pole_angle, cart_velocity, pole_angular_velocity).\n    \"\"\"\nreturn (\nself.cart_position,\nself.pole_angle,\nself.cart_velocity,\nself.pole_angular_velocity,\n)\n</code></pre>"},{"location":"reference/common/#cartpole.common.State.torch4","title":"<code>torch4() -&gt; torch.Tensor</code>","text":"<p>Returns state tuple as torch vector.</p> Source code in <code>cartpole/common.py</code> <pre><code>def torch4(self) -&gt; torch.Tensor:\n\"\"\"\n    Returns state tuple as torch vector.\n    \"\"\"\nreturn torch.tensor(self.as_tuple(), dtype=torch.float32)\n</code></pre>"},{"location":"reference/common/#cartpole.common.State.numpy4","title":"<code>numpy4() -&gt; numpy.ndarray</code>","text":"<p>Returns state tuple as numpy vector.</p> Source code in <code>cartpole/common.py</code> <pre><code>def numpy4(self) -&gt; numpy.ndarray:\n\"\"\"\n    Returns state tuple as numpy vector.\n    \"\"\"\nreturn numpy.array(self.as_tuple(), dtype=numpy.float32)\n</code></pre>"},{"location":"reference/common/#cartpole.common.Target","title":"<code>Target</code>","text":"<p>Control command, used to set desired cart acceleration.</p> <ol> <li> <p>Only acceleration is specified, cart moves with target acceleration.</p> </li> <li> <p>Velocity is specified, but position is not. Cart reaches velocity, with target acceleration (absolute value needed). If acceleration is not specified, used control limit as a default.</p> </li> <li> <p>Position is specified. Cart reaches position with target velocity/accleration, using bang-bang strategy. If velocity/accleration is not specified (absolute value needed), use control limit as a default.</p> </li> </ol> ATTRIBUTE DESCRIPTION <code>position</code> <p>desired cart position (m)</p> <p> TYPE: <code>float | None</code> </p> <code>velocity</code> <p>desired cart velocity (m/s)</p> <p> TYPE: <code>float | None</code> </p> <code>acceleration</code> <p>desired cart acceleration (m/s^2)</p> <p> TYPE: <code>float | None</code> </p> Source code in <code>cartpole/common.py</code> <pre><code>class Target(BaseModel):\n\"\"\"\n    Control command, used to set desired cart acceleration.\n    1. Only acceleration is specified, cart moves with target acceleration.\n    2. Velocity is specified, but position is not. Cart reaches velocity, with target acceleration (absolute value needed).\n    If acceleration is not specified, used control limit as a default.\n    3. Position is specified. Cart reaches position with target velocity/accleration, using bang-bang strategy.\n    If velocity/accleration is not specified (absolute value needed), use control limit as a default.\n    Attributes\n    ----------\n    position: float | None\n        desired cart position (m)\n    velocity: float | None\n        desired cart velocity (m/s)\n    acceleration: float | None\n        desired cart acceleration (m/s^2)\n    \"\"\"\nposition: float | None = None\nvelocity: float | None = None\nacceleration: float | None = None\ndef acceleration_or(self, default: float) -&gt; float:\n\"\"\"\n        Returns acceleration or default value.\n        \"\"\"\nreturn self.acceleration if self.acceleration is not None else default\ndef velocity_or(self, default: float) -&gt; float:\n\"\"\"\n        Returns velocity or default value.\n        \"\"\"\nreturn self.velocity if self.velocity is not None else default\ndef validate(self, config: Config) -&gt; None:\n\"\"\"\n        Validates target against limits.\n        \"\"\"\nif self.acceleration is not None:\nassert abs(self.acceleration) &lt;= config.control_limit.cart_acceleration\nif self.velocity is not None:\nassert abs(self.velocity) &lt;= config.control_limit.cart_velocity\nif self.acceleration is not None:\nassert self.acceleration &gt;= 0\nif self.position is not None:\nassert abs(self.position) &lt;= config.control_limit.cart_position\nif self.velocity is not None:\nassert self.velocity &gt;= 0\nif self.acceleration is not None:\nassert self.acceleration &gt;= 0\n</code></pre>"},{"location":"reference/common/#cartpole.common.Target.acceleration_or","title":"<code>acceleration_or(default: float) -&gt; float</code>","text":"<p>Returns acceleration or default value.</p> Source code in <code>cartpole/common.py</code> <pre><code>def acceleration_or(self, default: float) -&gt; float:\n\"\"\"\n    Returns acceleration or default value.\n    \"\"\"\nreturn self.acceleration if self.acceleration is not None else default\n</code></pre>"},{"location":"reference/common/#cartpole.common.Target.velocity_or","title":"<code>velocity_or(default: float) -&gt; float</code>","text":"<p>Returns velocity or default value.</p> Source code in <code>cartpole/common.py</code> <pre><code>def velocity_or(self, default: float) -&gt; float:\n\"\"\"\n    Returns velocity or default value.\n    \"\"\"\nreturn self.velocity if self.velocity is not None else default\n</code></pre>"},{"location":"reference/common/#cartpole.common.Target.validate","title":"<code>validate(config: Config) -&gt; None</code>","text":"<p>Validates target against limits.</p> Source code in <code>cartpole/common.py</code> <pre><code>def validate(self, config: Config) -&gt; None:\n\"\"\"\n    Validates target against limits.\n    \"\"\"\nif self.acceleration is not None:\nassert abs(self.acceleration) &lt;= config.control_limit.cart_acceleration\nif self.velocity is not None:\nassert abs(self.velocity) &lt;= config.control_limit.cart_velocity\nif self.acceleration is not None:\nassert self.acceleration &gt;= 0\nif self.position is not None:\nassert abs(self.position) &lt;= config.control_limit.cart_position\nif self.velocity is not None:\nassert self.velocity &gt;= 0\nif self.acceleration is not None:\nassert self.acceleration &gt;= 0\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase","title":"<code>CartPoleBase</code>","text":"<p>The class specifies a interface of the CartPole (device or simulation). A pole is attached by an joint to a cart, which moves along guide axis. The pendulum is initially at rest state. The goal is to maintain it in upright pose by increasing and reducing cart's acceleration.</p> <p>This environment is some variation of the cart-pole problem described by Barto, Sutton, and Anderson. A pole is at starting position 0 with no velocity and acceleration.</p> Source code in <code>cartpole/common.py</code> <pre><code>class CartPoleBase:\n\"\"\"\n    The class specifies a interface of the CartPole (device or simulation).\n    A pole is attached by an joint to a cart, which moves along guide axis.\n    The pendulum is initially at rest state. The goal is to maintain it in\n    upright pose by increasing and reducing cart's acceleration.\n    This environment is some variation of the cart-pole problem\n    described by Barto, Sutton, and Anderson.\n    A pole is at starting position 0 with no velocity and acceleration.\n    \"\"\"\ndef get_config(self) -&gt; Config:\n\"\"\"\n        Get current configuration of the device.\n        \"\"\"\nraise NotImplementedError\ndef set_config(self, config: Config) -&gt; None:\n\"\"\"\n        Sets new configuration for the device. Real device ignore hardware limits and parameters.\n        \"\"\"\nraise NotImplementedError\ndef reset(self, state: State = State()) -&gt; None:\n\"\"\"\n        Resets the device to the state. It must be called at the beginning of any session.\n        For real device only position may be set.\n        \"\"\"\nraise NotImplementedError\ndef get_state(self) -&gt; State:\n\"\"\"\n        Returns current device state.\n        \"\"\"\nraise NotImplementedError\ndef get_info(self) -&gt; BaseModel:\n\"\"\"\n        Returns usefull debug information as BaseModel.\n        \"\"\"\nraise NotImplementedError\ndef set_target(self, target: Target) -&gt; State:\n\"\"\"\n        Set desired target acceleration and returns current state.\n        \"\"\"\nraise NotImplementedError\ndef advance(self, delta: float) -&gt; None:\n\"\"\"\n        Advance system by delta seconds (has means only for simulation).\n        Parameters:\n        delta: float\n            time step in seconds\n        \"\"\"\nraise NotImplementedError\ndef close(self) -&gt; None:\n\"\"\"\n        Free all allocated resources.\n        \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.get_config","title":"<code>get_config() -&gt; Config</code>","text":"<p>Get current configuration of the device.</p> Source code in <code>cartpole/common.py</code> <pre><code>def get_config(self) -&gt; Config:\n\"\"\"\n    Get current configuration of the device.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.set_config","title":"<code>set_config(config: Config) -&gt; None</code>","text":"<p>Sets new configuration for the device. Real device ignore hardware limits and parameters.</p> Source code in <code>cartpole/common.py</code> <pre><code>def set_config(self, config: Config) -&gt; None:\n\"\"\"\n    Sets new configuration for the device. Real device ignore hardware limits and parameters.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.reset","title":"<code>reset(state: State = State()) -&gt; None</code>","text":"<p>Resets the device to the state. It must be called at the beginning of any session. For real device only position may be set.</p> Source code in <code>cartpole/common.py</code> <pre><code>def reset(self, state: State = State()) -&gt; None:\n\"\"\"\n    Resets the device to the state. It must be called at the beginning of any session.\n    For real device only position may be set.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.get_state","title":"<code>get_state() -&gt; State</code>","text":"<p>Returns current device state.</p> Source code in <code>cartpole/common.py</code> <pre><code>def get_state(self) -&gt; State:\n\"\"\"\n    Returns current device state.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.get_info","title":"<code>get_info() -&gt; BaseModel</code>","text":"<p>Returns usefull debug information as BaseModel.</p> Source code in <code>cartpole/common.py</code> <pre><code>def get_info(self) -&gt; BaseModel:\n\"\"\"\n    Returns usefull debug information as BaseModel.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.set_target","title":"<code>set_target(target: Target) -&gt; State</code>","text":"<p>Set desired target acceleration and returns current state.</p> Source code in <code>cartpole/common.py</code> <pre><code>def set_target(self, target: Target) -&gt; State:\n\"\"\"\n    Set desired target acceleration and returns current state.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.advance","title":"<code>advance(delta: float) -&gt; None</code>","text":"<p>Advance system by delta seconds (has means only for simulation).</p> <p>Parameters: delta: float     time step in seconds</p> Source code in <code>cartpole/common.py</code> <pre><code>def advance(self, delta: float) -&gt; None:\n\"\"\"\n    Advance system by delta seconds (has means only for simulation).\n    Parameters:\n    delta: float\n        time step in seconds\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/common/#cartpole.common.CartPoleBase.close","title":"<code>close() -&gt; None</code>","text":"<p>Free all allocated resources.</p> Source code in <code>cartpole/common.py</code> <pre><code>def close(self) -&gt; None:\n\"\"\"\n    Free all allocated resources.\n    \"\"\"\nraise NotImplementedError\n</code></pre>"},{"location":"reference/log/","title":"Logging","text":""},{"location":"reference/log/#cartpole.log","title":"<code>cartpole.log</code>","text":""},{"location":"reference/log/#cartpole.log.Level","title":"<code>Level</code>","text":"<p>Classic log levels: <code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code></p> Source code in <code>cartpole/log.py</code> <pre><code>class Level(enum.IntEnum):\n\"\"\"\n    Classic log levels: `UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`\n    \"\"\"\nUNKNOWN = 0\nDEBUG   = 1\nINFO    = 2\nWARNING = 3\nERROR   = 4\nFATAL   = 5\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger","title":"<code>MCAPLogger</code>","text":"<p>Logger to mcap file.</p> Example <pre><code>with MCAPLogger(log_path='log.mcap') as log:\nobj = ... # some pydantic object\nlog.publish('/topic', obj, stamp)\nlog.info('message')\n</code></pre> Source code in <code>cartpole/log.py</code> <pre><code>class MCAPLogger:\n\"\"\"\n    Logger to mcap file.\n    Example\n    -------\n    ```python\n    with MCAPLogger(log_path='log.mcap') as log:\n        obj = ... # some pydantic object\n        log.publish('/topic', obj, stamp)\n        log.info('message')\n    ```\n    \"\"\"\ndef __init__(self, log_path: str, level: Level=Level.INFO, compress=True):\n\"\"\"\n        Parameters\n        ----------\n        log_path: str\n            path to mcap log file\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        compress: bool\n            enable compression\n        \"\"\"\nself._pylog = get_pylogger('cartpole.mcap', level)\nself._writer = Writer(\nopen(log_path, \"wb\"),\ncompression=CompressionType.ZSTD if compress else CompressionType.NONE,\n)\nself._writer.start()\nself._topic_to_registration: Dict[str, Registration] = {}\n# preventive topic creation\nself.registration_log = self._register(\nFOXGLOVE_LOG_TOPIC,\nFOXGLOVE_LOG_MSG_TYPE,\nFOXGLOVE_LOGM_SG_SCHEMA)\ndef __enter__(self):\nreturn self\ndef _register(self, topic_name: str, name: str, schema: str) -&gt; Registration:\nif topic_name in self._topic_to_registration:\ncached = self._topic_to_registration[topic_name]\nassert cached.name == name, f'Topic {topic_name} registered with {cached.name}'\nreturn cached\nschema_id = self._writer.register_schema(\nname=name,\nencoding=\"jsonschema\",\ndata=schema.encode())\nchannel_id = self._writer.register_channel(\nschema_id=schema_id,\ntopic=topic_name,\nmessage_encoding=\"json\")\ncached = Registration(name=name, channel_id=channel_id)\nself._topic_to_registration[topic_name] = cached\nself._pylog.debug('id=%i topic=\\'%s\\', type=\\'%s\\'', channel_id, topic_name, name)\nreturn cached\ndef _register_class(self, topic_name: str, cls: Any) -&gt; Registration:\nname = cls.__name__\nassert issubclass(cls, BaseModel), 'Required pydantic model, but got {name}'\nreturn self._register(topic_name, name, json.dumps(cls.model_json_schema()))\ndef publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n        Publish object to topic.\n        Parameters:\n        -----------\n        topic_name:\n            topic name\n        obj: Any\n            object to dump (pydantic model)\n        stamp: float\n            timestamp in nanoseconds (float)\n        \"\"\"\nregistation = self._register_class(topic_name, type(obj))\nself._writer.add_message(\nchannel_id=registation.channel_id,\nlog_time=to_ns(stamp),\ndata=obj.model_dump_json().encode(),\npublish_time=to_ns(stamp),\n)\ndef log(self, msg: str, stamp: float, level: Level) -&gt; None:\n\"\"\"\n        Print message to topic `/log`.\n        Parameters:\n        -----------\n        msg: str\n            message to print\n        stamp: float\n            timestamp in nanoseconds (float)\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        \"\"\"\nsec, nsec = to_stamp(stamp)\nstamp_ns = to_ns(stamp)\nobj = {\n\"timestamp\": {\"sec\": sec, \"nsec\": nsec},\n\"level\": int(level),\n\"message\": msg,\n\"name\": \"cartpole\",\n\"file\": \"/dev/null\",\n\"line\": 0\n}\nself._writer.add_message(\nchannel_id=self.registration_log.channel_id,\nlog_time=stamp_ns,\ndata=json.dumps(obj).encode(),\npublish_time=stamp_ns)\ndef debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `DEBUG` level.\n        \"\"\"\nself.log(msg, stamp, Level.DEBUG)\ndef info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `INFO` level.\n        \"\"\"\nself.log(msg, stamp, Level.INFO)\ndef warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `WARNING` level.\n        \"\"\"\nself.log(msg, stamp, Level.WARNING)\ndef error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `ERROR` level.\n        \"\"\"\nself.log(msg, stamp, Level.ERROR)\ndef fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `FATAL` level.\n        \"\"\"\nself.log(msg, stamp, Level.FATAL)\ndef close(self):\n\"\"\"\n        Free log resources.\n        \"\"\"\nself._writer.finish()\ndef __exit__(self, exc_type, exc_value, traceback):\nself.close()\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.__init__","title":"<code>__init__(log_path: str, level: Level = Level.INFO, compress=True)</code>","text":"PARAMETER  DESCRIPTION <code>log_path</code> <p>path to mcap log file</p> <p> TYPE: <code>str</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>Level</code> DEFAULT: <code>INFO</code> </p> <code>compress</code> <p>enable compression</p> <p> DEFAULT: <code>True</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def __init__(self, log_path: str, level: Level=Level.INFO, compress=True):\n\"\"\"\n    Parameters\n    ----------\n    log_path: str\n        path to mcap log file\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    compress: bool\n        enable compression\n    \"\"\"\nself._pylog = get_pylogger('cartpole.mcap', level)\nself._writer = Writer(\nopen(log_path, \"wb\"),\ncompression=CompressionType.ZSTD if compress else CompressionType.NONE,\n)\nself._writer.start()\nself._topic_to_registration: Dict[str, Registration] = {}\n# preventive topic creation\nself.registration_log = self._register(\nFOXGLOVE_LOG_TOPIC,\nFOXGLOVE_LOG_MSG_TYPE,\nFOXGLOVE_LOGM_SG_SCHEMA)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.publish","title":"<code>publish(topic_name: str, obj: BaseModel, stamp: float) -&gt; None</code>","text":"<p>Publish object to topic.</p> Parameters: <p>topic_name:     topic name obj: Any     object to dump (pydantic model) stamp: float     timestamp in nanoseconds (float)</p> Source code in <code>cartpole/log.py</code> <pre><code>def publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n    Publish object to topic.\n    Parameters:\n    -----------\n    topic_name:\n        topic name\n    obj: Any\n        object to dump (pydantic model)\n    stamp: float\n        timestamp in nanoseconds (float)\n    \"\"\"\nregistation = self._register_class(topic_name, type(obj))\nself._writer.add_message(\nchannel_id=registation.channel_id,\nlog_time=to_ns(stamp),\ndata=obj.model_dump_json().encode(),\npublish_time=to_ns(stamp),\n)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.log","title":"<code>log(msg: str, stamp: float, level: Level) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code>.</p> Parameters: <p>msg: str     message to print stamp: float     timestamp in nanoseconds (float) level: Level     log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> Source code in <code>cartpole/log.py</code> <pre><code>def log(self, msg: str, stamp: float, level: Level) -&gt; None:\n\"\"\"\n    Print message to topic `/log`.\n    Parameters:\n    -----------\n    msg: str\n        message to print\n    stamp: float\n        timestamp in nanoseconds (float)\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nsec, nsec = to_stamp(stamp)\nstamp_ns = to_ns(stamp)\nobj = {\n\"timestamp\": {\"sec\": sec, \"nsec\": nsec},\n\"level\": int(level),\n\"message\": msg,\n\"name\": \"cartpole\",\n\"file\": \"/dev/null\",\n\"line\": 0\n}\nself._writer.add_message(\nchannel_id=self.registration_log.channel_id,\nlog_time=stamp_ns,\ndata=json.dumps(obj).encode(),\npublish_time=stamp_ns)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.debug","title":"<code>debug(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>DEBUG</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `DEBUG` level.\n    \"\"\"\nself.log(msg, stamp, Level.DEBUG)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.info","title":"<code>info(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>INFO</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `INFO` level.\n    \"\"\"\nself.log(msg, stamp, Level.INFO)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.warning","title":"<code>warning(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>WARNING</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `WARNING` level.\n    \"\"\"\nself.log(msg, stamp, Level.WARNING)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.error","title":"<code>error(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>ERROR</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `ERROR` level.\n    \"\"\"\nself.log(msg, stamp, Level.ERROR)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.fatal","title":"<code>fatal(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>FATAL</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `FATAL` level.\n    \"\"\"\nself.log(msg, stamp, Level.FATAL)\n</code></pre>"},{"location":"reference/log/#cartpole.log.MCAPLogger.close","title":"<code>close()</code>","text":"<p>Free log resources.</p> Source code in <code>cartpole/log.py</code> <pre><code>def close(self):\n\"\"\"\n    Free log resources.\n    \"\"\"\nself._writer.finish()\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger","title":"<code>FoxgloveWebsocketLogger</code>","text":"<p>Logger to foxglove websocket, messages are available in real time. Class will start new thread with asyncio event loop.</p> Example <pre><code>with FoxgloveWebsocketLogger() as log:\n    obj = ... # some pydantic object\n    log.publish('/topic', obj, stamp)\n    log.info('message')\n</code></pre> Source code in <code>cartpole/log.py</code> <pre><code>class FoxgloveWebsocketLogger:\n\"\"\"\n    Logger to foxglove websocket, messages are available in real time.\n    Class will start new thread with asyncio event loop.\n    Example\n    -------\n    ```\n    with FoxgloveWebsocketLogger() as log:\n        obj = ... # some pydantic object\n        log.publish('/topic', obj, stamp)\n        log.info('message')\n    ```\n    \"\"\"\ndef __init__(self, level: int = Level.INFO):\n\"\"\"\n        Parameters\n        ----------\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        \"\"\"\nself._loop = asyncio.new_event_loop()\nself._input_queue = asyncio.Queue()\nself._exception_queue = asyncio.Queue()\nself._stop = Event()\nargs = (self._loop, self._input_queue, self._stop, self._exception_queue, level)\nself._foxlgove_thread = Thread(\ntarget=foxglove_main,\nname='foxglove_main_loop',\ndaemon=True,\nargs=args)\nself._foxlgove_thread.start()\ndef __enter__(self):\nreturn self\ndef publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n        Publish object to topic.\n        Parameters\n        ----------\n        topic_name: str\n            topic name\n        obj: BaseModel\n            object to dump (pydantic model)\n        stamp: float\n            timestamp in nanoseconds (float)\n        \"\"\"\nif not (self._loop.is_running() and self._foxlgove_thread.is_alive()):\nif not self._exception_queue.empty():\nraise self._exception_queue.get_nowait()\nraise AssertionError('Foxglove logger is not running')\nitem = (topic_name, stamp, obj)\nasyncio.run_coroutine_threadsafe(self._input_queue.put(item), self._loop)\ndef log(self, msg: str, stamp: float, level: int) -&gt; None:\n\"\"\"\n        Print message to topic `/log`.\n        Parameters\n        ----------\n        msg: str\n            message to print\n        stamp: float\n            timestamp in nanoseconds (float)\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        \"\"\"\nself.publish(\"`/log`\", msg, stamp)\ndef debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `DEBUG` level.\n        \"\"\"\nself.log(msg, stamp, Level.DEBUG)\ndef info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `INFO` level.\n        \"\"\"\nself.log(msg, stamp, Level.INFO)\ndef warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `WARNING` level.\n        \"\"\"\nself.log(msg, stamp, Level.WARNING)\ndef error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `ERROR` level.\n        \"\"\"\nself.log(msg, stamp, Level.ERROR)\ndef fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to topic `/log` with `FATAL` level.\n        \"\"\"\nself.log(msg, stamp, Level.FATAL)\ndef close(self):\n\"\"\"\n        Free log resources.\n        \"\"\"\nself._stop.set()\nself._foxlgove_thread.join()\ndef __exit__(self, exc_type, exc_value, traceback):\nself.close()\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.__init__","title":"<code>__init__(level: int = Level.INFO)</code>","text":"PARAMETER  DESCRIPTION <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>int</code> DEFAULT: <code>INFO</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def __init__(self, level: int = Level.INFO):\n\"\"\"\n    Parameters\n    ----------\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nself._loop = asyncio.new_event_loop()\nself._input_queue = asyncio.Queue()\nself._exception_queue = asyncio.Queue()\nself._stop = Event()\nargs = (self._loop, self._input_queue, self._stop, self._exception_queue, level)\nself._foxlgove_thread = Thread(\ntarget=foxglove_main,\nname='foxglove_main_loop',\ndaemon=True,\nargs=args)\nself._foxlgove_thread.start()\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.publish","title":"<code>publish(topic_name: str, obj: BaseModel, stamp: float) -&gt; None</code>","text":"<p>Publish object to topic.</p> PARAMETER  DESCRIPTION <code>topic_name</code> <p>topic name</p> <p> TYPE: <code>str</code> </p> <code>obj</code> <p>object to dump (pydantic model)</p> <p> TYPE: <code>BaseModel</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float)</p> <p> TYPE: <code>float</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n    Publish object to topic.\n    Parameters\n    ----------\n    topic_name: str\n        topic name\n    obj: BaseModel\n        object to dump (pydantic model)\n    stamp: float\n        timestamp in nanoseconds (float)\n    \"\"\"\nif not (self._loop.is_running() and self._foxlgove_thread.is_alive()):\nif not self._exception_queue.empty():\nraise self._exception_queue.get_nowait()\nraise AssertionError('Foxglove logger is not running')\nitem = (topic_name, stamp, obj)\nasyncio.run_coroutine_threadsafe(self._input_queue.put(item), self._loop)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.log","title":"<code>log(msg: str, stamp: float, level: int) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code>.</p> PARAMETER  DESCRIPTION <code>msg</code> <p>message to print</p> <p> TYPE: <code>str</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float)</p> <p> TYPE: <code>float</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>int</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def log(self, msg: str, stamp: float, level: int) -&gt; None:\n\"\"\"\n    Print message to topic `/log`.\n    Parameters\n    ----------\n    msg: str\n        message to print\n    stamp: float\n        timestamp in nanoseconds (float)\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nself.publish(\"`/log`\", msg, stamp)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.debug","title":"<code>debug(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>DEBUG</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `DEBUG` level.\n    \"\"\"\nself.log(msg, stamp, Level.DEBUG)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.info","title":"<code>info(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>INFO</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `INFO` level.\n    \"\"\"\nself.log(msg, stamp, Level.INFO)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.warning","title":"<code>warning(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>WARNING</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `WARNING` level.\n    \"\"\"\nself.log(msg, stamp, Level.WARNING)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.error","title":"<code>error(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>ERROR</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `ERROR` level.\n    \"\"\"\nself.log(msg, stamp, Level.ERROR)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.fatal","title":"<code>fatal(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to topic <code>/log</code> with <code>FATAL</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to topic `/log` with `FATAL` level.\n    \"\"\"\nself.log(msg, stamp, Level.FATAL)\n</code></pre>"},{"location":"reference/log/#cartpole.log.FoxgloveWebsocketLogger.close","title":"<code>close()</code>","text":"<p>Free log resources.</p> Source code in <code>cartpole/log.py</code> <pre><code>def close(self):\n\"\"\"\n    Free log resources.\n    \"\"\"\nself._stop.set()\nself._foxlgove_thread.join()\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger","title":"<code>Logger</code>","text":"<p>Compound Logger class that logs to console, foxglove and mcap.</p> Example <pre><code>with Logger(log_path='log.mcap', level=INFO) as log:\n    obj = ... # some pydantic object\n\n    log.publish('/topic', obj)\n    log.info('message')\n</code></pre> Source code in <code>cartpole/log.py</code> <pre><code>class Logger:\n\"\"\"\n    Compound Logger class that logs to console, foxglove and mcap.\n    Example\n    -------\n    ```\n    with Logger(log_path='log.mcap', level=INFO) as log:\n        obj = ... # some pydantic object\n        log.publish('/topic', obj)\n        log.info('message')\n    ```\n    \"\"\"\ndef __init__(self, log_path: str = '', level: Level = Level.INFO):\n\"\"\"\n        Parameters\n        ----------\n        log_path: str\n            path to mcap log file, if not provided, no mcap log will be created\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        \"\"\"\nself._pylog = get_pylogger('cartpole', level)\nself._foxglove_log = FoxgloveWebsocketLogger()\nself._mcap_log = None\nif log_path:\nself._mcap_log = MCAPLogger(log_path, level=level)\ndef publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n        Parameters\n        ----------\n        topic_name: str\n            topic name\n        obj: BaseModel\n            pydantic object\n        stamp: float\n            timestamp in nanoseconds (float), if not provided, current time used\n        \"\"\"\nif self._mcap_log:\nself._mcap_log.publish(topic_name, obj, stamp)\nself._foxglove_log.publish(topic_name, obj, stamp)\ndef log(self, msg: str, stamp: float, level: Level = Level.INFO) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log`.\n        Parameters\n        ----------\n        msg: str\n            message to print\n        stamp: float\n            timestamp in nanoseconds (float), if not provided, current time used\n        level: Level\n            log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n        \"\"\"\nself._pylog.log(pylog_level(level), f'{stamp:.3f}: {msg}')\nself._foxglove_log.log(msg, stamp, level)\nif self._mcap_log:\nself._mcap_log.log(msg, stamp, level)\ndef debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log` with `DEBUG` level.\n        \"\"\"\nself.info(msg, stamp, Level.DEBUG)\ndef info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log` with `INFO` level.\n        \"\"\"\nself.log(msg, stamp, Level.INFO)\ndef warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log` with `WARNING` level.\n        \"\"\"\nself.log(msg, stamp, Level.WARNING)\ndef error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log` with `ERROR` level.\n        \"\"\"\nself.log(msg, stamp, Level.ERROR)\ndef fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n        Print message to console and topic `/log` with `FATAL` level.\n        \"\"\"\nself.log(msg, stamp, Level.FATAL)\ndef close(self):\n\"\"\"\n        Free log resources.\n        \"\"\"\nself._foxglove_log.close()\nif self._mcap_log:\nself._mcap_log.close()\ndef __exit__(self):\nself.close()\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.__init__","title":"<code>__init__(log_path: str = '', level: Level = Level.INFO)</code>","text":"PARAMETER  DESCRIPTION <code>log_path</code> <p>path to mcap log file, if not provided, no mcap log will be created</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>Level</code> DEFAULT: <code>INFO</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def __init__(self, log_path: str = '', level: Level = Level.INFO):\n\"\"\"\n    Parameters\n    ----------\n    log_path: str\n        path to mcap log file, if not provided, no mcap log will be created\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nself._pylog = get_pylogger('cartpole', level)\nself._foxglove_log = FoxgloveWebsocketLogger()\nself._mcap_log = None\nif log_path:\nself._mcap_log = MCAPLogger(log_path, level=level)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.publish","title":"<code>publish(topic_name: str, obj: BaseModel, stamp: float) -&gt; None</code>","text":"PARAMETER  DESCRIPTION <code>topic_name</code> <p>topic name</p> <p> TYPE: <code>str</code> </p> <code>obj</code> <p>pydantic object</p> <p> TYPE: <code>BaseModel</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float), if not provided, current time used</p> <p> TYPE: <code>float</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def publish(self, topic_name: str, obj: BaseModel, stamp: float) -&gt; None:\n\"\"\"\n    Parameters\n    ----------\n    topic_name: str\n        topic name\n    obj: BaseModel\n        pydantic object\n    stamp: float\n        timestamp in nanoseconds (float), if not provided, current time used\n    \"\"\"\nif self._mcap_log:\nself._mcap_log.publish(topic_name, obj, stamp)\nself._foxglove_log.publish(topic_name, obj, stamp)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.log","title":"<code>log(msg: str, stamp: float, level: Level = Level.INFO) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code>.</p> PARAMETER  DESCRIPTION <code>msg</code> <p>message to print</p> <p> TYPE: <code>str</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float), if not provided, current time used</p> <p> TYPE: <code>float</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>Level</code> DEFAULT: <code>INFO</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def log(self, msg: str, stamp: float, level: Level = Level.INFO) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log`.\n    Parameters\n    ----------\n    msg: str\n        message to print\n    stamp: float\n        timestamp in nanoseconds (float), if not provided, current time used\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nself._pylog.log(pylog_level(level), f'{stamp:.3f}: {msg}')\nself._foxglove_log.log(msg, stamp, level)\nif self._mcap_log:\nself._mcap_log.log(msg, stamp, level)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.debug","title":"<code>debug(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>DEBUG</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def debug(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `DEBUG` level.\n    \"\"\"\nself.info(msg, stamp, Level.DEBUG)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.info","title":"<code>info(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>INFO</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def info(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `INFO` level.\n    \"\"\"\nself.log(msg, stamp, Level.INFO)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.warning","title":"<code>warning(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>WARNING</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def warning(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `WARNING` level.\n    \"\"\"\nself.log(msg, stamp, Level.WARNING)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.error","title":"<code>error(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>ERROR</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def error(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `ERROR` level.\n    \"\"\"\nself.log(msg, stamp, Level.ERROR)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.fatal","title":"<code>fatal(msg: str, stamp: float) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>FATAL</code> level.</p> Source code in <code>cartpole/log.py</code> <pre><code>def fatal(self, msg: str, stamp: float) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `FATAL` level.\n    \"\"\"\nself.log(msg, stamp, Level.FATAL)\n</code></pre>"},{"location":"reference/log/#cartpole.log.Logger.close","title":"<code>close()</code>","text":"<p>Free log resources.</p> Source code in <code>cartpole/log.py</code> <pre><code>def close(self):\n\"\"\"\n    Free log resources.\n    \"\"\"\nself._foxglove_log.close()\nif self._mcap_log:\nself._mcap_log.close()\n</code></pre>"},{"location":"reference/log/#cartpole.log.setup","title":"<code>setup(log_path: str = '', level: Level = Level.INFO) -&gt; None</code>","text":"<p>Setup gloval logger.</p> PARAMETER  DESCRIPTION <code>log_path</code> <p>path to mcap log file, if not provided, no mcap log will be created</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>Level</code> DEFAULT: <code>INFO</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def setup(log_path: str = '', level: Level = Level.INFO) -&gt; None:\n\"\"\"\n    Setup gloval logger.\n    Parameters\n    ----------\n    log_path: str\n        path to mcap log file, if not provided, no mcap log will be created\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nglobal __logger\nclose()\n__logger = Logger(log_path=log_path, level=level)\n</code></pre>"},{"location":"reference/log/#cartpole.log.close","title":"<code>close()</code>","text":"<p>Close global logger</p> Source code in <code>cartpole/log.py</code> <pre><code>def close():\n\"\"\"\n    Close global logger\n    \"\"\"\nglobal __logger\nif __logger:\n__logger.close()\n__logger = None\n</code></pre>"},{"location":"reference/log/#cartpole.log.get_logger","title":"<code>get_logger() -&gt; Logger</code>","text":"<p>Get global logger instance</p> Source code in <code>cartpole/log.py</code> <pre><code>def get_logger() -&gt; Logger:\n\"\"\"\n    Get global logger instance\n    \"\"\"\nglobal __logger\nif not __logger:\nsetup()\nreturn __logger\n</code></pre>"},{"location":"reference/log/#cartpole.log.publish","title":"<code>publish(topic_name: str, obj: BaseModel, stamp: float | None = None) -&gt; None</code>","text":"<p>Publish object to topic of global logger. If logger is not set, it will be created with default settings.</p> PARAMETER  DESCRIPTION <code>topic_name</code> <p>topic name</p> <p> TYPE: <code>str</code> </p> <code>obj</code> <p>pydantic model</p> <p> TYPE: <code>BaseModel</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float), if not provided, current time used</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def publish(topic_name: str, obj: BaseModel, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Publish object to topic of global logger.\n    If logger is not set, it will be created with default settings.\n    Parameters\n    ----------\n    topic_name: str\n        topic name\n    obj: BaseModel\n        pydantic model\n    stamp: float\n        timestamp in nanoseconds (float), if not provided, current time used\n    \"\"\"\nget_logger().publish(topic_name, obj, this_or_now(stamp))\n</code></pre>"},{"location":"reference/log/#cartpole.log.log","title":"<code>log(msg: str, stamp: float | None = None, level: Level = Level.INFO) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code>. If logger is not set, it will be created with default settings.</p> PARAMETER  DESCRIPTION <code>msg</code> <p>message to print</p> <p> TYPE: <code>str</code> </p> <code>stamp</code> <p>timestamp in nanoseconds (float), if not provided, current time used</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>level</code> <p>log level (<code>UNKNOWN</code>, <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>FATAL</code>)</p> <p> TYPE: <code>Level</code> DEFAULT: <code>INFO</code> </p> Source code in <code>cartpole/log.py</code> <pre><code>def log(msg: str, stamp: float|None = None, level: Level = Level.INFO) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log`.\n    If logger is not set, it will be created with default settings.\n    Parameters\n    ----------\n    msg: str\n        message to print\n    stamp: float\n        timestamp in nanoseconds (float), if not provided, current time used\n    level: Level\n        log level (`UNKNOWN`, `DEBUG`, `INFO`, `WARNING`, `ERROR`, `FATAL`)\n    \"\"\"\nget_logger().log(msg, this_or_now(stamp), level)\n</code></pre>"},{"location":"reference/log/#cartpole.log.debug","title":"<code>debug(msg: str, stamp: float | None = None) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>DEBUG</code> level. If logger is not set, it will be created with default settings.</p> Source code in <code>cartpole/log.py</code> <pre><code>def debug(msg: str, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `DEBUG` level.\n    If logger is not set, it will be created with default settings.\n    \"\"\"\nlog(msg, stamp, Level.DEBUG)\n</code></pre>"},{"location":"reference/log/#cartpole.log.info","title":"<code>info(msg: str, stamp: float | None = None) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>INFO</code> level. If logger is not set, it will be created with default settings.</p> Source code in <code>cartpole/log.py</code> <pre><code>def info(msg: str, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `INFO` level.\n    If logger is not set, it will be created with default settings.\n    \"\"\"\nlog(msg, stamp, Level.INFO)\n</code></pre>"},{"location":"reference/log/#cartpole.log.warning","title":"<code>warning(msg: str, stamp: float | None = None) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>WARNING</code> level. If logger is not set, it will be created with default settings.</p> Source code in <code>cartpole/log.py</code> <pre><code>def warning(msg: str, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `WARNING` level.\n    If logger is not set, it will be created with default settings.\n    \"\"\"\nlog(msg, stamp, Level.WARNING)\n</code></pre>"},{"location":"reference/log/#cartpole.log.error","title":"<code>error(msg: str, stamp: float | None = None) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>ERROR</code> level. If logger is not set, it will be created with default settings.</p> Source code in <code>cartpole/log.py</code> <pre><code>def error(msg: str, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `ERROR` level.\n    If logger is not set, it will be created with default settings.\n    \"\"\"\nlog(msg, stamp, Level.ERROR)\n</code></pre>"},{"location":"reference/log/#cartpole.log.fatal","title":"<code>fatal(msg: str, stamp: float | None = None) -&gt; None</code>","text":"<p>Print message to console and topic <code>/log</code> with <code>FATAL</code> level. If logger is not set, it will be created with default settings.</p> Source code in <code>cartpole/log.py</code> <pre><code>def fatal(msg: str, stamp: float|None = None) -&gt; None:\n\"\"\"\n    Print message to console and topic `/log` with `FATAL` level.\n    If logger is not set, it will be created with default settings.\n    \"\"\"\nlog(msg, stamp, Level.FATAL)\n</code></pre>"},{"location":"reference/simulator/","title":"Simulation","text":""},{"location":"reference/simulator/#cartpole.simulator","title":"<code>cartpole.simulator</code>","text":""},{"location":"reference/simulator/#cartpole.simulator.SimulatorInfo","title":"<code>SimulatorInfo</code>","text":"<p>Simulator info.</p> ATTRIBUTE DESCRIPTION <code>step_count</code> <p>number of simulation steps</p> <p> TYPE: <code>int</code> </p> <code>integration_count</code> <p>number of integration steps</p> <p> TYPE: <code>int</code> </p> Source code in <code>cartpole/simulator.py</code> <pre><code>class SimulatorInfo(BaseModel):\n\"\"\"\n    Simulator info.\n    Attributes\n    ----------\n    step_count: int\n        number of simulation steps\n    integration_count: int\n        number of integration steps\n    \"\"\"\nstep_count: int = 0\nintegration_count: int = 0\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator","title":"<code>Simulator</code>","text":"<p>CartPole simulator (integration implemented using RK4 method).</p> <p>For more information see: https://cartpole.robotics-lab.ru/dynamics-and-control</p> Source code in <code>cartpole/simulator.py</code> <pre><code>class Simulator(CartPoleBase):\n\"\"\"\n    CartPole simulator (integration implemented using RK4 method).\n    For more information see: https://cartpole.robotics-lab.ru/dynamics-and-control\n    \"\"\"\ndef __init__(self, integration_step: float = 0.001):\n\"\"\"\n        Create simulator with some default config.\n        Parameters\n        ----------\n        integration_step: float\n            integration time step (s)\n        \"\"\"\n# set default config\nself._config = Config(\nhardware_limit=Limits(\ncart_position=0.5, cart_velocity=2.0, cart_acceleration=5.0\n),\ncontrol_limit=Limits(),\nparameters=Parameters(g=9.81, b=0, k=0.3),\n)\nself._state = State(error=Error.NEED_RESET)\nself._target = Target(velocity=0)\nself._integration_step = integration_step\nself._integration_count = 0\nself._step_count = 0\ndef get_config(self) -&gt; Config:\n\"\"\"\n        Return current config.\n        \"\"\"\nreturn self._config\ndef set_config(self, config: Config) -&gt; None:\n\"\"\"\n        Set new config. In case of invalid config, AssertionError is raised.\n        \"\"\"\nassert config.control_limit.stronger(config.hardware_limit)\nassert config.parameters.friction_coef is not None\nassert config.parameters.friction_coef &gt;= 0\nassert config.parameters.mass_coef is not None\nassert config.parameters.mass_coef &gt; 0\nself._config = config\ndef _eval_acceleration_by_velocity(\nself, velocity: float, eps: float = 1e-6\n) -&gt; float:\nerr = velocity - self._state.cart_velocity\na = self._target.acceleration_or(self._config.control_limit.cart_acceleration)\nif abs(err) &lt; a * self._integration_step:\nreturn snap_zero(err / self._integration_step, eps)\nreturn sgn(err) * a\ndef _eval_cart_acceleration(self, eps: float = 1e-6) -&gt; float:\nif self._target.position is not None:\na = self._target.acceleration_or(\nself._config.control_limit.cart_acceleration\n)\nv = self._target.velocity_or(self._config.control_limit.cart_velocity)\nerr = self._target.position - self._state.cart_position\n# print(f'_eval_cart_acceleration err={err}, v={v}, a={a}, state_v={self._state.cart_velocity}')\nif abs(err) &lt; 1e-3:\nreturn self._eval_acceleration_by_velocity(0)\nif sgn(err) != sgn(self._state.cart_velocity):\n# stoppping to change direction\nreturn self._eval_acceleration_by_velocity(sgn(err) * v)\nelse:\n# bang-bang strategy\na_brake = self._state.cart_velocity**2 / (2 * abs(err))\n# print(f'a_brake = {a_brake}, a = {a}')\nif a_brake &gt;= a:\nreturn self._eval_acceleration_by_velocity(0)\nelse:\nreturn self._eval_acceleration_by_velocity(sgn(err) * v)\nif self._target.velocity is not None:\nreturn self._eval_acceleration_by_velocity(self._target.velocity, eps)\nif self._target.acceleration is not None:\nreturn self._target.acceleration\nraise Exception(\"At least one of the target is required\")\ndef _derivative(self, s: numpy.ndarray, a: float) -&gt; numpy.ndarray:\n\"\"\"\n        Calculate derivative of the given state (used for integration).\n        Parameters\n        ----------\n        s: numpy.ndarray\n            state vector\n        a: float\n            cart acceleration (m/s^2)\n        Returns\n        -------\n        :numpy.ndarray\n            derivative of the given state\n        \"\"\"\nresult = numpy.zeros(4)\nb = self._config.parameters.friction_coef\nk = self._config.parameters.mass_coef\ng = self._config.parameters.gravity\nresult[0] = s[2]\nresult[1] = s[3]\nresult[2] = a\nresult[3] = -b * s[3] - k * (a * numpy.cos(s[1]) + g * numpy.sin(s[1]))\nreturn result\ndef reset(self, state: State = State()) -&gt; None:\n\"\"\"\n        Reset simulator to the given state.\n        \"\"\"\nself._state = state\nself._target = Target(velocity=0)\nself._count = 0\nself._integration_count = 0\ndef get_state(self) -&gt; State:\n\"\"\"\n        Return current state.\n        \"\"\"\nreturn self._state\ndef get_info(self) -&gt; SimulatorInfo:\n\"\"\"\n        Return current simulator info.\n        \"\"\"\nreturn SimulatorInfo(\nstep_count=self._step_count, integration_count=self._integration_count\n)\ndef set_target(self, target: Target) -&gt; State:\n\"\"\"\n        Set control target and return current state.\n        \"\"\"\nself._target = target\nif not self._state.error:\nself._state.cart_acceleration = self._eval_cart_acceleration()\nself._state.validate(self._config)\nreturn self.get_state()\ndef advance(self, delta: float) -&gt; None:\n\"\"\"\n        Make simulation step of the given length.\n        For integration, RK4 method is used.\n        Parameters\n        ----------\n        delta: float\n            length of the simulation step (s)\n        \"\"\"\nif self._state.error:\nreturn\ns = self._state.numpy4()\nh = self._integration_step\nh_2 = h / 2\nintegration_step_n = int(delta / h)\nfor _ in range(integration_step_n):\na = self._eval_cart_acceleration()\nk1 = self._derivative(s, a)\nk2 = self._derivative(s + k1 * h_2, a)\nk3 = self._derivative(s + k2 * h_2, a)\nk4 = self._derivative(s + k3 * h, a)\ns += (k1 + 2 * k2 + 2 * k3 + k4) * h / 6\nself._integration_count += 1\nself._state = State(\ncart_position=s[0],\ncart_velocity=s[2],\ncart_acceleration=a,\npole_angle=s[1],\npole_angular_velocity=s[3],\nstamp=self._integration_step * self._integration_count,\n)\nself._state.validate(self._config)\nself._step_count += 1\ndef close(self) -&gt; None:\n\"\"\"\n        Clear any resources used by the simulator.\n        \"\"\"\npass\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.__init__","title":"<code>__init__(integration_step: float = 0.001)</code>","text":"<p>Create simulator with some default config.</p> PARAMETER  DESCRIPTION <code>integration_step</code> <p>integration time step (s)</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.001</code> </p> Source code in <code>cartpole/simulator.py</code> <pre><code>def __init__(self, integration_step: float = 0.001):\n\"\"\"\n    Create simulator with some default config.\n    Parameters\n    ----------\n    integration_step: float\n        integration time step (s)\n    \"\"\"\n# set default config\nself._config = Config(\nhardware_limit=Limits(\ncart_position=0.5, cart_velocity=2.0, cart_acceleration=5.0\n),\ncontrol_limit=Limits(),\nparameters=Parameters(g=9.81, b=0, k=0.3),\n)\nself._state = State(error=Error.NEED_RESET)\nself._target = Target(velocity=0)\nself._integration_step = integration_step\nself._integration_count = 0\nself._step_count = 0\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.get_config","title":"<code>get_config() -&gt; Config</code>","text":"<p>Return current config.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def get_config(self) -&gt; Config:\n\"\"\"\n    Return current config.\n    \"\"\"\nreturn self._config\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.set_config","title":"<code>set_config(config: Config) -&gt; None</code>","text":"<p>Set new config. In case of invalid config, AssertionError is raised.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def set_config(self, config: Config) -&gt; None:\n\"\"\"\n    Set new config. In case of invalid config, AssertionError is raised.\n    \"\"\"\nassert config.control_limit.stronger(config.hardware_limit)\nassert config.parameters.friction_coef is not None\nassert config.parameters.friction_coef &gt;= 0\nassert config.parameters.mass_coef is not None\nassert config.parameters.mass_coef &gt; 0\nself._config = config\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.reset","title":"<code>reset(state: State = State()) -&gt; None</code>","text":"<p>Reset simulator to the given state.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def reset(self, state: State = State()) -&gt; None:\n\"\"\"\n    Reset simulator to the given state.\n    \"\"\"\nself._state = state\nself._target = Target(velocity=0)\nself._count = 0\nself._integration_count = 0\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.get_state","title":"<code>get_state() -&gt; State</code>","text":"<p>Return current state.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def get_state(self) -&gt; State:\n\"\"\"\n    Return current state.\n    \"\"\"\nreturn self._state\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.get_info","title":"<code>get_info() -&gt; SimulatorInfo</code>","text":"<p>Return current simulator info.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def get_info(self) -&gt; SimulatorInfo:\n\"\"\"\n    Return current simulator info.\n    \"\"\"\nreturn SimulatorInfo(\nstep_count=self._step_count, integration_count=self._integration_count\n)\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.set_target","title":"<code>set_target(target: Target) -&gt; State</code>","text":"<p>Set control target and return current state.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def set_target(self, target: Target) -&gt; State:\n\"\"\"\n    Set control target and return current state.\n    \"\"\"\nself._target = target\nif not self._state.error:\nself._state.cart_acceleration = self._eval_cart_acceleration()\nself._state.validate(self._config)\nreturn self.get_state()\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.advance","title":"<code>advance(delta: float) -&gt; None</code>","text":"<p>Make simulation step of the given length. For integration, RK4 method is used.</p> PARAMETER  DESCRIPTION <code>delta</code> <p>length of the simulation step (s)</p> <p> TYPE: <code>float</code> </p> Source code in <code>cartpole/simulator.py</code> <pre><code>def advance(self, delta: float) -&gt; None:\n\"\"\"\n    Make simulation step of the given length.\n    For integration, RK4 method is used.\n    Parameters\n    ----------\n    delta: float\n        length of the simulation step (s)\n    \"\"\"\nif self._state.error:\nreturn\ns = self._state.numpy4()\nh = self._integration_step\nh_2 = h / 2\nintegration_step_n = int(delta / h)\nfor _ in range(integration_step_n):\na = self._eval_cart_acceleration()\nk1 = self._derivative(s, a)\nk2 = self._derivative(s + k1 * h_2, a)\nk3 = self._derivative(s + k2 * h_2, a)\nk4 = self._derivative(s + k3 * h, a)\ns += (k1 + 2 * k2 + 2 * k3 + k4) * h / 6\nself._integration_count += 1\nself._state = State(\ncart_position=s[0],\ncart_velocity=s[2],\ncart_acceleration=a,\npole_angle=s[1],\npole_angular_velocity=s[3],\nstamp=self._integration_step * self._integration_count,\n)\nself._state.validate(self._config)\nself._step_count += 1\n</code></pre>"},{"location":"reference/simulator/#cartpole.simulator.Simulator.close","title":"<code>close() -&gt; None</code>","text":"<p>Clear any resources used by the simulator.</p> Source code in <code>cartpole/simulator.py</code> <pre><code>def close(self) -&gt; None:\n\"\"\"\n    Clear any resources used by the simulator.\n    \"\"\"\npass\n</code></pre>"}]}