{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>CartPole is an educational project of the robotics group (HSE/FCS). It is designed to learn the basics of optimal control and reinforcement learning. The environment is a variation of famous control problem, where a pole is attached by a joint to a cart, moving along a axis. Some motor drives the cart with acceleration as control input. The goal is to swing up the pole and maintain it in unstable equilibrium state. You can follow our progress on YouTube.</p> <p> </p> Linear CartPole <p>Linear CartPole is classic kinematic scheme, but it requires a lot of space, periodical homing (return cart to the initial pose) and etc. Radial CartPole is a modification, which allows to avoid these problems, keeping the same motion equations. In case of radial version cart moves along the circle with radius \\(r\\). Yoy can see the difference on the pictures below.</p> LinearRadial <p></p> <p></p>"},{"location":"dynamics/","title":"Dynamics","text":""},{"location":"dynamics/#linear-cartpole","title":"Linear CartPole","text":"<p>A cart with mass \\(m_c\\) moves along the \\(x\\)-axis, so its center \\(C\\) has coordinates \\((x, 0)^T\\). A pole with mass \\(m_p\\) is attached to the cart with a hinge at point \\(C\\), and rotates around with viscous friction. The pole's center of mass is at \\(P\\), moment of inertia is \\(I_p\\). The angle of rotation is denoted as \\(\\theta\\), measured counterclockwise from the axis \\(-y\\). A force \\(f_x\\) is applied to the cart and the force of gravity \\(g\\) acts on the pole.</p> <p> </p> \\[ \\begin{align}     &amp; C = \\begin{pmatrix}         x \\\\ 0     \\end{pmatrix}      &amp;&amp; \\dot{C} = \\begin{pmatrix}         \\dot{x} \\\\ 0     \\end{pmatrix} \\\\     &amp; P = \\begin{pmatrix}         x + l \\sin \\theta \\\\ - l \\cos \\theta     \\end{pmatrix}     &amp;&amp; \\dot{P} = \\begin{pmatrix}         \\dot{x} + l \\dot{\\theta} \\cos \\theta \\\\ l \\dot{\\theta} \\sin \\theta     \\end{pmatrix} \\end{align} \\] <p>The kinetic energy of the cart is</p> \\[ \\begin{align}     T_c = \\frac{1}{2} m_c \\begin{Vmatrix}         \\dot{C}     \\end{Vmatrix}_2^2 = \\frac{1}{2} m_c \\dot{x}^2. \\end{align} \\] <p>As a result energy of the whole system is following</p> \\[ \\begin{align}     T &amp; = T_c + T_p = \\frac{1}{2} \\dot{x}^2 (m_c + m_p) + m_p \\dot{x} l \\dot{\\theta} \\cos \\theta             + \\frac{1}{2} \\dot{\\theta}^2 \\left( m_p l^2  + I_p \\right); \\\\     U &amp; = \\underbrace{U_c}_{0} + U_p = -m_p gl \\cos \\theta. \\end{align} \\] <p>To find the dynamics of system, let's use the Euler-Lagrange differential equation, where \\(L = T - U\\), \\(q = (x, \\theta)^T\\) and \\(Q\\) is the generalized force. In our case, we have deal with two forces: motor force \\(f_x\\) and viscous friction \\(f_{\\theta}(\\theta, \\dot{\\theta}) = -\\mu \\dot{\\theta}\\).</p> \\[ \\begin{align}     Q &amp;= \\frac{d}{dt} \\frac{dL}{d\\dot{q}} - \\frac{dL}{dq} = \\begin{pmatrix} f_x \\\\ f_{\\theta} \\end{pmatrix} \\end{align} \\] <p>Motion equations</p> \\[ \\begin{align}     m_p \\ddot{x} l \\cos \\theta + \\ddot{\\theta} \\left(m_p l^2 + I_p\\right) + m_p g l \\sin \\theta &amp;= f_{\\theta}(\\theta, \\dot{\\theta}) \\\\     \\ddot{x}(m_c + m_p) + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta &amp;= f_{x}. \\end{align} \\] Derivation \\[ \\begin{equation}     L = \\frac{1}{2} \\dot{x}^2 (m_c + m_p) + m_p \\dot{x} l \\dot{\\theta} \\cos \\theta +             \\frac{1}{2} \\dot{\\theta}^2 \\left( m_p l^2  + I_p \\right) + m_p gl \\cos \\theta. \\end{equation} \\] \\[ \\begin{align}     \\frac{dL}{d\\theta} &amp; = - m_p \\dot{x} l \\dot{\\theta} \\sin \\theta - m_p gl \\sin \\theta \\\\     \\frac{dL}{d\\dot{\\theta}} &amp; = m_p \\dot{x} l \\cos \\theta + \\left(m_p l^2 + I_p\\right) \\dot{\\theta} \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} &amp; =         m_p \\ddot{x} l \\cos \\theta - m_p  \\dot{x} l \\dot{\\theta} \\sin \\theta + \\left(m_p l^2 + I_p\\right) \\ddot{\\theta}  \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} - \\frac{dL}{d\\theta} &amp; =             m_p \\ddot{x} l \\cos \\theta + \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} + m_p g l \\sin \\theta \\\\ \\end{align} \\] \\[ \\begin{align}     \\frac{dL}{dx} &amp; = 0 \\\\     \\frac{dL}{d\\dot{x}} &amp; = (m_c + m_p) \\dot{x} + m_p l \\dot{\\theta} \\cos \\theta \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{x}} &amp; =             (m_c + m_p) \\ddot{x} + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{x}} - \\frac{dL}{dx} &amp; =         (m_c + m_p) \\ddot{x} + m_p l \\ddot{\\theta} \\cos \\theta - m_p l \\dot{\\theta}^2 \\sin \\theta. \\\\ \\end{align} \\]"},{"location":"dynamics/#acceleration-control","title":"Acceleration control","text":"<p>Let's make the assumption that the motor can generate any force necessary for the cart to reach acceleration in \\([-a, a]\\) on a fixed cart velocity range. This fact allows us to consider the cart acceleration as a control input and significantly simplify the equations of motion</p> \\[ \\begin{align}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;= f_{\\theta}(\\theta, \\dot{\\theta})             - m_p \\ddot{x} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{x}  &amp;= u, \\quad u \\in [-a, a]. \\end{align} \\] <p>But for practice it's more convenient to use another form</p> \\[ \\begin{align*}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;= -\\mu\\dot{\\theta} - m_p \\ddot{x} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{\\theta} &amp;= -\\frac{\\mu}{\\left(m_p l^2 + I_p\\right)}\\dot{\\theta}             - \\frac{\\ddot{x} \\cos \\theta - g \\sin \\theta}{l + \\frac{I_p}{m_p l}}. \\\\ \\end{align*} \\] <p>Since all parameters do not change over time, we can greatly simplify the motion equations.</p> <p>Motion equations</p> \\[ \\begin{align}     \\ddot{\\theta} &amp;= -b\\dot{\\theta} - \\frac{\\ddot{x} \\cos \\theta - g \\sin \\theta}{k} \\\\     \\ddot{x} &amp;= u, \\quad u \\in [-a, a]. \\end{align} \\]"},{"location":"dynamics/#radial-cartpole","title":"Radial CartPole","text":"<p>Linear CartPole is classic kinematic scheme, but it requires a lot of space, periodical homing (return cart to the initial pose ) and etc. Radial CartPole is a modification, which allows to avoid problems, keeping the same motion equations. In case of radial version cart moves along the circle with radius \\(r\\).</p> <p> </p> <p>Pole's mass \\(m_p\\), moment of inertian \\(I_p\\) and distance from hinge to center of mass \\(l_p\\) are known again. But instead of position \\(x\\) there is angle \\(\\phi\\) (in some sense \\(x = r\\phi\\)) and control input is radial acceleration \\(\\ddot{\\phi}\\). Also, as shown in previous section, we can consider mass of cart is zero.</p> <p>Actually, after some calculations we can get the same motion equations as for classic version, but linear variables are replaced by angular ones</p> \\[ \\begin{align}     \\left(m_p l^2 + I_p\\right) \\ddot{\\theta} &amp;=             f_{\\theta}(\\theta, \\dot{\\theta}) - m_p r \\ddot{\\phi} l \\cos \\theta - m_p g l \\sin \\theta \\\\     \\ddot{\\phi}  &amp;= u, \\quad u \\in [u_{min}, u_{max}]. \\end{align} \\] <p>Dynamics equation</p> \\[ \\begin{align}     \\ddot{\\theta} &amp;= -b\\dot{\\theta} - \\frac{r \\ddot{\\phi} \\cos \\theta - g \\sin \\theta}{k} \\\\     \\ddot{\\phi} &amp;= u, \\quad u \\in [u_{min}, u_{max}]. \\end{align} \\] Derivation <p>Note that \\(T_p^r = \\frac{1}{2}I_p\\dot{\\theta}^2\\) and \\(T_p^t = \\frac{1}{2}m_p \\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2\\). To calculate \\(\\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2\\), consider the coordinates system plane, which is attached to the cart and tangent to the circle (pole fully lies in that plane).</p> <p> </p> \\[ \\begin{align}     \\begin{Vmatrix} \\dot{P} \\end{Vmatrix}_2^2 = \\left(\\underbrace{\\dot{\\phi} r         + \\dot{\\theta} l_p \\cos \\theta }_{\\dot{x}'}\\right)^2          + \\left(\\underbrace{\\dot{\\theta} l_p \\sin \\theta}_{\\dot{y}'} \\right)^2         = \\dot{\\phi}^2 r^2 + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2. \\end{align} \\] <p>Bellow rest of the calculations are shown</p> \\[ \\begin{align}     T_p &amp;= \\frac{1}{2}I_p\\dot{\\theta}^2 + \\frac{1}{2}m_p\\left(\\dot{\\phi}^2 r^2             + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2\\right) \\\\     U_p &amp;= - m_p g l_p \\cos \\theta \\\\     L = T_p - U_p &amp;= \\frac{1}{2} I_p \\dot{\\theta}^2 + \\frac{1}{2} m_p \\left(\\dot{\\phi}^2 r^2             + 2 \\dot{\\phi} \\dot{\\theta} r l_p \\cos \\theta + \\dot{\\theta}^2 l_p^2\\right) + m_p g l_p \\cos \\theta \\end{align} \\] \\[ \\begin{align}     \\frac{dL}{d\\theta} &amp; = - m_p l_p (r \\dot{\\phi} \\dot{\\theta} \\sin \\theta + g \\sin \\theta) \\\\     \\frac{dL}{d\\dot{\\theta}} &amp; = I_p \\dot{\\theta} + m_p l_p (\\dot{\\phi} r \\cos \\theta + l_p \\dot{\\theta}) \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} &amp; =             I_p \\ddot{\\theta} + m_p l_p (r \\ddot{\\phi} \\cos \\theta + l_p \\ddot{\\theta} - r \\dot{\\phi} \\dot{\\theta} \\sin \\theta) \\\\     \\frac{d}{dt} \\frac{dL}{d\\dot{\\theta}} - \\frac{dL}{d\\theta} &amp; =             \\ddot{\\theta} (I_p  + m_p l_p^2) + m_p l_p (r \\ddot{\\phi} \\cos \\theta + g \\sin \\theta) = 0. \\end{align} \\]"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#enviroment","title":"Enviroment","text":"<p>Python is main language of project. So, students may learn control theory and make experiments faster and easier. Firstly, you need checkout repo and prepare enviroment.</p> <pre><code>git clone https://github.com/robotics-laboratory/cart-pole.git\n</code></pre> <p>We have a built container with all dependencies, use it for development and testing (you need to have docker and docker-compose installed). Run in root of repo following commands.</p> <pre><code># start container\ndocker compose up -d\n\n# enter to container\ndocker exec -it cartpole bash\n\n# run tests to check that everithing is OK\npytest tests\n</code></pre> <p>Repo folder is mounted as <code>/cartpole</code> dir, so you can edit files in your favorite IDE and run scripts in container. Also there are some environment variables, which may be useful for you:</p> <ul> <li><code>$CONTAINER_NAME</code> - name of container (default is <code>cartpole</code>)</li> </ul> <p>If you want to use your own python environment, you can install all dependencies manually, using poetry.</p> <pre><code># check poetry config\npoetry config --list # install all depencies to .venv folder\npoetry install\n\n# run tests to check that everithing is OK\npoetry run pytest tests\n</code></pre> <p>Also you can build and run docs server locally.</p> <pre><code>mkdocs serve -a 0.0.0.0:8000\n</code></pre>"},{"location":"quickstart/#foxglove","title":"Foxglove","text":"<p>For visualization of real time data we use foxglove studio. We strongly suggest to use our instance, but you may also setup server with our specific fixes by yourself (more information here). In Foxglove Studio select <code>Open connection</code> than <code>Foxglove WebSocket</code> and enter <code>ws://localhost:8765</code> (use your port) in address field.</p>"},{"location":"quickstart/#logging","title":"Logging","text":"<p>We have convinient logging system, it may show data in real time and replay saved data in mcap format.</p> examples/log.py<pre><code>import cartpole.log as log\nfrom pydantic import BaseModel\nimport random\nimport time\n# all messages must be inherited from BaseModel\nclass RandMsg(BaseModel):\ndist: str = 'uniform(0, 1)'\nvalue: float = 0.0\n# define log file name\nlog.setup(log_path='log_example.mcap', level=log.DEBUG)\n# messages are available in real time in foxglove (websocket mode)\nfor i in range(10):\nvalue = random.uniform(0, 1)\n# publish message, timestamp is optional (default is current time)\nlog.publish('/random', RandMsg(value=value))\n# print message to console and log (see /log topic)\nlog.info(f'publish {value:.2f}')\n# add some delay for demo purposes\ntime.sleep(0.2)\n</code></pre>"},{"location":"quickstart/#simulation","title":"Simulation","text":"<p>For development and testing of control algorithms, we provide CartPole simulator, which fully implemntet CartPoleBase interface.  The simulation is carried out by numerical integration of parameterized dynamic system (more information here). Also simulator may be used to train ML agents.</p> examples/simulatio.py<pre><code>from cartpole import Error, State\nfrom cartpole import Simulator\nfrom cartpole import log\nimport time\n# set simulation step as 0.05 seconds\ndelta = 0.05\n# setup logging (look at mcap logs after simulation)\nlog.setup(log_path='simulation_example.mcap')\n# create simulator with default config\ncartpole = Simulator()\n# reset simulator to initial state\ncartpole.reset(state=State(cart_position=0, pole_angle=2))\n# run simulation\nfor _ in range(1000):\n# use for loggin simulation time instead of real time\nstate = cartpole.get_state()\n# log system state and simulator info\nlog.publish('/cartpole/state', state, state.stamp)\n# make simulation step\ncartpole.advance(delta)\ntime.sleep(delta)\n</code></pre>"}]}